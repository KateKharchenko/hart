!function(t){var d,p,e="0.5.0",g="hasOwnProperty",y=/[\.\/]/,v=/\s*,\s*/,m=function(t,e){return t-e},x={n:{}},b=function(){for(var t=0,e=this.length;t<e;t++)if(void 0!==this[t])return this[t]},F=function(){for(var t=this.length;--t;)if(void 0!==this[t])return this[t]},n=Object.prototype.toString,C=String,w=Array.isArray||function(t){return t instanceof Array||"[object Array]"==n.call(t)};eve=function(t,e){var n,r=p,i=Array.prototype.slice.call(arguments,2),a=eve.listeners(t),o=0,s=[],l={},u=[],f=d;u.firstDefined=b,u.lastDefined=F,d=t;for(var c=p=0,h=a.length;c<h;c++)"zIndex"in a[c]&&(s.push(a[c].zIndex),a[c].zIndex<0&&(l[a[c].zIndex]=a[c]));for(s.sort(m);s[o]<0;)if(n=l[s[o++]],u.push(n.apply(e,i)),p)return p=r,u;for(c=0;c<h;c++)if("zIndex"in(n=a[c]))if(n.zIndex==s[o]){if(u.push(n.apply(e,i)),p)break;do{if((n=l[s[++o]])&&u.push(n.apply(e,i)),p)break}while(n)}else l[n.zIndex]=n;else if(u.push(n.apply(e,i)),p)break;return p=r,d=f,u},eve._events=x,eve.listeners=function(t){var e,n,r,i,a,o,s,l,u=w(t)?t:t.split(y),f=x,c=[f],h=[];for(i=0,a=u.length;i<a;i++){for(l=[],o=0,s=c.length;o<s;o++)for(n=[(f=c[o].n)[u[i]],f["*"]],r=2;r--;)(e=n[r])&&(l.push(e),h=h.concat(e.f||[]));c=l}return h},eve.separator=function(t){t?(t="["+(t=C(t).replace(/(?=[\.\^\]\[\-])/g,"\\"))+"]",y=new RegExp(t)):y=/[\.\/]/},eve.on=function(t,o){if("function"!=typeof o)return function(){};for(var e=w(t)?w(t[0])?t:[t]:C(t).split(v),n=0,r=e.length;n<r;n++)!function(t){for(var e,n=w(t)?t:C(t).split(y),r=x,i=0,a=n.length;i<a;i++)r=(r=r.n).hasOwnProperty(n[i])&&r[n[i]]||(r[n[i]]={n:{}});for(r.f=r.f||[],i=0,a=r.f.length;i<a;i++)if(r.f[i]==o){e=!0;break}!e&&r.f.push(o)}(e[n]);return function(t){+t==+t&&(o.zIndex=+t)}},eve.f=function(t){var e=[].slice.call(arguments,1);return function(){eve.apply(null,[t,null].concat(e).concat([].slice.call(arguments,0)))}},eve.stop=function(){p=1},eve.nt=function(t){var e=w(d)?d.join("."):d;return t?new RegExp("(?:\\.|\\/|^)"+t+"(?:\\.|\\/|$)").test(e):e},eve.nts=function(){return w(d)?d:d.split(y)},eve.off=eve.unbind=function(t,e){if(t){var n=w(t)?w(t[0])?t:[t]:C(t).split(v);if(1<n.length)for(var r=0,i=n.length;r<i;r++)eve.off(n[r],e);else{n=w(t)?t:C(t).split(y);var a,o,s,l,u,f=[x],c=[];for(r=0,i=n.length;r<i;r++)for(l=0;l<f.length;l+=s.length-2){if(s=[l,1],a=f[l].n,"*"!=n[r])a[n[r]]&&(s.push(a[n[r]]),c.unshift({n:a,name:n[r]}));else for(o in a)a[g](o)&&(s.push(a[o]),c.unshift({n:a,name:o}));f.splice.apply(f,s)}for(r=0,i=f.length;r<i;r++)for(a=f[r];a.n;){if(e){if(a.f){for(l=0,u=a.f.length;l<u;l++)if(a.f[l]==e){a.f.splice(l,1);break}!a.f.length&&delete a.f}for(o in a.n)if(a.n[g](o)&&a.n[o].f){var h=a.n[o].f;for(l=0,u=h.length;l<u;l++)if(h[l]==e){h.splice(l,1);break}!h.length&&delete a.n[o].f}}else for(o in delete a.f,a.n)a.n[g](o)&&a.n[o].f&&delete a.n[o].f;a=a.n}t:for(r=0,i=c.length;r<i;r++){for(o in(a=c[r]).n[a.name].f)continue t;for(o in a.n[a.name].n)continue t;delete a.n[a.name]}}}else eve._events=x={n:{}}},eve.once=function(t,e){var n=function(){return eve.off(t,n),e.apply(this,arguments)};return eve.on(t,n)},eve.version=e,eve.toString=function(){return"You are running Eve "+e},"undefined"!=typeof module&&module.exports?module.exports=eve:"function"==typeof define&&define.amd?define("eve",[],function(){return eve}):t.eve=eve}(this),function(e,n){if("function"==typeof define&&define.amd)define(["eve"],function(t){return n(e,t)});else if("undefined"!=typeof exports){var t=require("eve");module.exports=n(e,t)}else n(e,e.eve)}(window||this,function(v,Y){var a,o,f,s,i,c,h,t,d,p,y,m,x,b,F,C,w,B=(a=void 0===Y?function(){}:Y,f={},s=v.requestAnimationFrame||v.webkitRequestAnimationFrame||v.mozRequestAnimationFrame||v.oRequestAnimationFrame||v.msRequestAnimationFrame||function(t){return setTimeout(t,16,(new Date).getTime()),!0},i=Array.isArray||function(t){return t instanceof Array||"[object Array]"==Object.prototype.toString.call(t)},c=0,h="M"+(+new Date).toString(36),t=Date.now||function(){return+new Date},d=function(t){var e=this;if(null==t)return e.s;var n=e.s-t;e.b+=e.dur*n,e.B+=e.dur*n,e.s=t},p=function(t){if(null==t)return this.spd;this.spd=t},y=function(t){var e=this;if(null==t)return e.dur;e.s=e.s*t/e.dur,e.dur=t},m=function(){delete f[this.id],this.update(),a("mina.stop."+this.id,this)},x=function(){var t=this;t.pdif||(delete f[t.id],t.update(),t.pdif=t.get()-t.b)},b=function(){var t=this;t.pdif&&(t.b=t.get()-t.pdif,delete t.pdif,f[t.id]=t,C())},F=function(){var t,e=this;if(i(e.start)){t=[];for(var n=0,r=e.start.length;n<r;n++)t[n]=+e.start[n]+(e.end[n]-e.start[n])*e.easing(e.s)}else t=+e.start+(e.end-e.start)*e.easing(e.s);e.set(t)},C=function(t){if(t){var e=0;for(var n in f)if(f.hasOwnProperty(n)){var r=f[n],i=r.get();e++,r.s=(i-r.b)/(r.dur/r.spd),1<=r.s&&(delete f[n],r.s=1,e--,function(t){setTimeout(function(){a("mina.finish."+t.id,t)})}(r)),r.update()}o=!!e&&s(C)}else o||(o=s(C))},(w=function(t,e,n,r,i,a,o){var s={id:h+(c++).toString(36),start:t,end:e,b:n,s:0,dur:r-n,spd:1,get:i,set:a,easing:o||w.linear,status:d,speed:p,duration:y,stop:m,pause:x,resume:b,update:F};f[s.id]=s;var l,u=0;for(l in f)if(f.hasOwnProperty(l)&&2==++u)break;return 1==u&&C(),s}).time=t,w.getById=function(t){return f[t]||null},w.linear=function(t){return t},w.easeout=function(t){return Math.pow(t,1.7)},w.easein=function(t){return Math.pow(t,.48)},w.easeinout=function(t){if(1==t)return 1;if(0==t)return 0;var e=.48-t/1.04,n=Math.sqrt(.1734+e*e),r=n-e,i=-n-e,a=Math.pow(Math.abs(r),1/3)*(r<0?-1:1)+Math.pow(Math.abs(i),1/3)*(i<0?-1:1)+.5;return 3*(1-a)*a*a+a*a*a},w.backin=function(t){return 1==t?1:t*t*(2.70158*t-1.70158)},w.backout=function(t){return 0==t?0:(t-=1)*t*(2.70158*t+1.70158)+1},w.elastic=function(t){return t==!!t?t:Math.pow(2,-10*t)*Math.sin((t-.075)*(2*Math.PI)/.3)+1},w.bounce=function(t){var e=7.5625,n=2.75;return t<1/n?e*t*t:t<2/n?e*(t-=1.5/n)*t+.75:t<2.5/n?e*(t-=2.25/n)*t+.9375:e*(t-=2.625/n)*t+.984375},v.mina=w),e=function(t){function y(t,e){if(t){if(t.nodeType)return $(t);if(_(t,"array")&&y.set)return y.set.apply(y,t);if(t instanceof R)return t;if(null==e)try{return $(t=d.doc.querySelector(String(t)))}catch(t){return null}}return new X(t=null==t?"100%":t,e=null==e?"100%":e)}y.version="0.5.1",y.toString=function(){return"Snap v"+this.version},y._={};var d={win:t.window,doc:t.window.document};y._.glob=d;var e,o,u="hasOwnProperty",v=String,l=parseFloat,f=parseInt,c=Math,h=c.max,p=c.min,m=c.abs,x=(c.pow,c.PI),b=(c.round,""),n=Object.prototype.toString,F=/^\s*((#[a-f\d]{6})|(#[a-f\d]{3})|rgba?\(\s*([\d\.]+%?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+%?(?:\s*,\s*[\d\.]+%?)?)\s*\)|hsba?\(\s*([\d\.]+(?:deg|\xb0|%)?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+(?:%?\s*,\s*[\d\.]+)?%?)\s*\)|hsla?\(\s*([\d\.]+(?:deg|\xb0|%)?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+(?:%?\s*,\s*[\d\.]+)?%?)\s*\))\s*$/i,C=(y._.separator=/[,\s]+/,/[\s]*,[\s]*/),w={hs:1,rg:1},r=/([a-z])[\s,]*((-?\d*\.?\d*(?:e[\-+]?\d+)?[\s]*,?[\s]*)+)/gi,a=/([rstm])[\s,]*((-?\d*\.?\d*(?:e[\-+]?\d+)?[\s]*,?[\s]*)+)/gi,s=/(-?\d*\.?\d*(?:e[\-+]?\d+)?)[\s]*,?[\s]*/gi,i=0,B="S"+(+new Date).toString(36),A=function(t){return(t&&t.type?t.type:b)+B+(i++).toString(36)},E="http://www.w3.org/1999/xlink",S="http://www.w3.org/2000/svg",k={};y.url=function(t){return"url('#"+t+"')"};function D(t,e){if(e){if("#text"==t&&(t=d.doc.createTextNode(e.text||e["#text"]||"")),"#comment"==t&&(t=d.doc.createComment(e.text||e["#text"]||"")),"string"==typeof t&&(t=D(t)),"string"==typeof e)return 1==t.nodeType?"xlink:"==e.substring(0,6)?t.getAttributeNS(E,e.substring(6)):"xml:"==e.substring(0,4)?t.getAttributeNS(S,e.substring(4)):t.getAttribute(e):"text"==e?t.nodeValue:null;if(1==t.nodeType){for(var n in e)if(e[u](n)){var r=v(e[n]);r?"xlink:"==n.substring(0,6)?t.setAttributeNS(E,n.substring(6),r):"xml:"==n.substring(0,4)?t.setAttributeNS(S,n.substring(4),r):t.setAttribute(n,r):t.removeAttribute(n)}}else"text"in e&&(t.nodeValue=e.text)}else t=d.doc.createElementNS(S,t);return t}function _(t,e){return"finite"==(e=v.prototype.toLowerCase.call(e))?isFinite(t):!("array"!=e||!(t instanceof Array||Array.isArray&&Array.isArray(t)))||("null"==e&&null===t||e==typeof t&&null!==t||"object"==e&&t===Object(t)||n.call(t).slice(8,-1).toLowerCase()==e)}function T(a,o,s){return function t(){var e=Array.prototype.slice.call(arguments,0),n=e.join("␀"),r=t.cache=t.cache||{},i=t.count=t.count||[];return r[u](n)?function(t,e){for(var n=0,r=t.length;n<r;n++)if(t[n]===e)return t.push(t.splice(n,1)[0])}(i,n):(1e3<=i.length&&delete r[i.shift()],i.push(n),r[n]=a.apply(o,e)),s?s(r[n]):r[n]}}function M(t){return t%360*x/180}y._.$=D,y._.id=A,y.format=(e=/\{([^\}]+)\}/g,o=/(?:(?:^|\.)(.+?)(?=\[|\.|$|\()|\[('|")(.+?)\2\])(\(\))?/g,function(t,i){return v(t).replace(e,function(t,e){return n=t,a=r=i,e.replace(o,function(t,e,n,r,i){e=e||r,a&&(e in a&&(a=a[e]),"function"==typeof a&&i&&(a=a()))}),a=(null==a||a==r?n:a)+"";var n,r,a})}),y._.clone=function t(e){if("function"==typeof e||Object(e)!==e)return e;var n=new e.constructor;for(var r in e)e[u](r)&&(n[r]=t(e[r]));return n},y._.cacher=T,y.rad=M,y.deg=function(t){return 180*t/x%360},y.sin=function(t){return c.sin(y.rad(t))},y.tan=function(t){return c.tan(y.rad(t))},y.cos=function(t){return c.cos(y.rad(t))},y.asin=function(t){return y.deg(c.asin(t))},y.acos=function(t){return y.deg(c.acos(t))},y.atan=function(t){return y.deg(c.atan(t))},y.atan2=function(t){return y.deg(c.atan2(t))},y.angle=function t(e,n,r,i,a,o){if(null==a){var s=e-r,l=n-i;return s||l?(180+180*c.atan2(-l,-s)/x+360)%360:0}return t(e,n,a,o)-t(r,i,a,o)},y.len=function(t,e,n,r){return Math.sqrt(y.len2(t,e,n,r))},y.len2=function(t,e,n,r){return(t-n)*(t-n)+(e-r)*(e-r)},y.closestPoint=function(t,r,i){function e(t){var e=t.x-r,n=t.y-i;return e*e+n*n}for(var n,a,o,s,l=t.node,u=l.getTotalLength(),f=u/l.pathSegList.numberOfItems*.125,c=1/0,h=0;h<=u;h+=f)(s=e(o=l.getPointAtLength(h)))<c&&(n=o,a=h,c=s);for(f*=.5;.5<f;){var d,p,g,y,v,m;0<=(g=a-f)&&(v=e(d=l.getPointAtLength(g)))<c?(n=d,a=g,c=v):(y=a+f)<=u&&(m=e(p=l.getPointAtLength(y)))<c?(n=p,a=y,c=m):f*=.5}return n={x:n.x,y:n.y,length:a,distance:Math.sqrt(c)}},y.is=_,y.snapTo=function(t,e,n){if(n=_(n,"finite")?n:10,_(t,"array")){for(var r=t.length;r--;)if(m(t[r]-e)<=n)return t[r]}else{var i=e%(t=+t);if(i<n)return e-i;if(t-n<i)return e-i+t}return e},y.getRGB=T(function(t){if(!t||(t=v(t)).indexOf("-")+1)return{r:-1,g:-1,b:-1,hex:"none",error:1,toString:L};if("none"==t)return{r:-1,g:-1,b:-1,hex:"none",toString:L};if(!w[u](t.toLowerCase().substring(0,2))&&"#"!=t.charAt()&&(t=N(t)),!t)return{r:-1,g:-1,b:-1,hex:"none",error:1,toString:L};var e,n,r,i,a,o,s=t.match(F);return s?(s[2]&&(r=f(s[2].substring(5),16),n=f(s[2].substring(3,5),16),e=f(s[2].substring(1,3),16)),s[3]&&(r=f((a=s[3].charAt(3))+a,16),n=f((a=s[3].charAt(2))+a,16),e=f((a=s[3].charAt(1))+a,16)),s[4]&&(o=s[4].split(C),e=l(o[0]),"%"==o[0].slice(-1)&&(e*=2.55),n=l(o[1]),"%"==o[1].slice(-1)&&(n*=2.55),r=l(o[2]),"%"==o[2].slice(-1)&&(r*=2.55),"rgba"==s[1].toLowerCase().slice(0,4)&&(i=l(o[3])),o[3]&&"%"==o[3].slice(-1)&&(i/=100)),s[5]?(o=s[5].split(C),e=l(o[0]),"%"==o[0].slice(-1)&&(e/=100),n=l(o[1]),"%"==o[1].slice(-1)&&(n/=100),r=l(o[2]),"%"==o[2].slice(-1)&&(r/=100),("deg"==o[0].slice(-3)||"°"==o[0].slice(-1))&&(e/=360),"hsba"==s[1].toLowerCase().slice(0,4)&&(i=l(o[3])),o[3]&&"%"==o[3].slice(-1)&&(i/=100),y.hsb2rgb(e,n,r,i)):s[6]?(o=s[6].split(C),e=l(o[0]),"%"==o[0].slice(-1)&&(e/=100),n=l(o[1]),"%"==o[1].slice(-1)&&(n/=100),r=l(o[2]),"%"==o[2].slice(-1)&&(r/=100),("deg"==o[0].slice(-3)||"°"==o[0].slice(-1))&&(e/=360),"hsla"==s[1].toLowerCase().slice(0,4)&&(i=l(o[3])),o[3]&&"%"==o[3].slice(-1)&&(i/=100),y.hsl2rgb(e,n,r,i)):(e=p(c.round(e),255),n=p(c.round(n),255),r=p(c.round(r),255),i=p(h(i,0),1),(s={r:e,g:n,b:r,toString:L}).hex="#"+(16777216|r|n<<8|e<<16).toString(16).slice(1),s.opacity=_(i,"finite")?i:1,s)):{r:-1,g:-1,b:-1,hex:"none",error:1,toString:L}},y),y.hsb=T(function(t,e,n){return y.hsb2rgb(t,e,n).hex}),y.hsl=T(function(t,e,n){return y.hsl2rgb(t,e,n).hex}),y.rgb=T(function(t,e,n,r){if(_(r,"finite")){var i=c.round;return"rgba("+[i(t),i(e),i(n),+r.toFixed(2)]+")"}return"#"+(16777216|n|e<<8|t<<16).toString(16).slice(1)});var N=function(t){var n=d.doc.getElementsByTagName("head")[0]||d.doc.getElementsByTagName("svg")[0],r="rgb(255, 0, 0)";return(N=T(function(t){if("red"==t.toLowerCase())return r;n.style.color=r,n.style.color=t;var e=d.doc.defaultView.getComputedStyle(n,b).getPropertyValue("color");return e==r?null:e}))(t)},j=function(){return"hsb("+[this.h,this.s,this.b]+")"},P=function(){return"hsl("+[this.h,this.s,this.l]+")"},L=function(){return 1==this.opacity||null==this.opacity?this.hex:"rgba("+[this.r,this.g,this.b,this.opacity]+")"},q=function(t,e,n){if(null==e&&_(t,"object")&&"r"in t&&"g"in t&&"b"in t&&(n=t.b,e=t.g,t=t.r),null==e&&_(t,string)){var r=y.getRGB(t);t=r.r,e=r.g,n=r.b}return(1<t||1<e||1<n)&&(t/=255,e/=255,n/=255),[t,e,n]},O=function(t,e,n,r){var i={r:t=c.round(255*t),g:e=c.round(255*e),b:n=c.round(255*n),opacity:_(r,"finite")?r:1,hex:y.rgb(t,e,n),toString:L};return _(r,"finite")&&(i.opacity=r),i};y.color=function(t){var e;return _(t,"object")&&"h"in t&&"s"in t&&"b"in t?(e=y.hsb2rgb(t),t.r=e.r,t.g=e.g,t.b=e.b,t.opacity=1,t.hex=e.hex):_(t,"object")&&"h"in t&&"s"in t&&"l"in t?(e=y.hsl2rgb(t),t.r=e.r,t.g=e.g,t.b=e.b,t.opacity=1,t.hex=e.hex):(_(t,"string")&&(t=y.getRGB(t)),_(t,"object")&&"r"in t&&"g"in t&&"b"in t&&!("error"in t)?(e=y.rgb2hsl(t),t.h=e.h,t.s=e.s,t.l=e.l,e=y.rgb2hsb(t),t.v=e.b):((t={hex:"none"}).r=t.g=t.b=t.h=t.s=t.v=t.l=-1,t.error=1)),t.toString=L,t},y.hsb2rgb=function(t,e,n,r){var i,a,o,s,l;return _(t,"object")&&"h"in t&&"s"in t&&"b"in t&&(n=t.b,e=t.s,r=t.o,t=t.h),s=(l=n*e)*(1-m((t=(t*=360)%360/60)%2-1)),i=a=o=n-l,O(i+=[l,s,0,0,s,l][t=~~t],a+=[s,l,l,s,0,0][t],o+=[0,0,s,l,l,s][t],r)},y.hsl2rgb=function(t,e,n,r){var i,a,o,s,l;return _(t,"object")&&"h"in t&&"s"in t&&"l"in t&&(n=t.l,e=t.s,t=t.h),(1<t||1<e||1<n)&&(t/=360,e/=100,n/=100),s=(l=2*e*(n<.5?n:1-n))*(1-m((t=(t*=360)%360/60)%2-1)),i=a=o=n-l/2,O(i+=[l,s,0,0,s,l][t=~~t],a+=[s,l,l,s,0,0][t],o+=[0,0,s,l,l,s][t],r)},y.rgb2hsb=function(t,e,n){var r,i;return t=(n=q(t,e,n))[0],e=n[1],n=n[2],{h:((0==(i=(r=h(t,e,n))-p(t,e,n))?null:r==t?(e-n)/i:r==e?(n-t)/i+2:(t-e)/i+4)+360)%6*60/360,s:0==i?0:i/r,b:r,toString:j}},y.rgb2hsl=function(t,e,n){var r,i,a,o;return t=(n=q(t,e,n))[0],e=n[1],n=n[2],r=((i=h(t,e,n))+(a=p(t,e,n)))/2,{h:((0==(o=i-a)?null:i==t?(e-n)/o:i==e?(n-t)/o+2:(t-e)/o+4)+360)%6*60/360,s:0==o?0:r<.5?o/(2*r):o/(2-2*r),l:r,toString:P}},y.parsePathString=function(t){if(!t)return null;var e=y.path(t);if(e.arr)return y.path.clone(e.arr);var a={a:7,c:6,o:2,h:1,l:2,m:2,r:4,q:4,s:4,t:2,v:1,u:3,z:0},o=[];return _(t,"array")&&_(t[0],"array")&&(o=y.path.clone(t)),o.length||v(t).replace(r,function(t,e,n){var r=[],i=e.toLowerCase();if(n.replace(s,function(t,e){e&&r.push(+e)}),"m"==i&&2<r.length&&(o.push([e].concat(r.splice(0,2))),i="l",e="m"==e?"l":"L"),"o"==i&&1==r.length&&o.push([e,r[0]]),"r"==i)o.push([e].concat(r));else for(;r.length>=a[i]&&(o.push([e].concat(r.splice(0,a[i]))),a[i]););}),o.toString=y.path.toString,e.arr=y.path.clone(o),o};var V=y.parseTransformString=function(t){if(!t)return null;var i=[];return _(t,"array")&&_(t[0],"array")&&(i=y.path.clone(t)),i.length||v(t).replace(a,function(t,e,n){var r=[];e.toLowerCase();n.replace(s,function(t,e){e&&r.push(+e)}),i.push([e].concat(r))}),i.toString=y.path.toString,i};y._.svgTransform2string=function(t){var r=[];return t=t.replace(/(?:^|\s)(\w+)\(([^)]+)\)/g,function(t,e,n){return n=n.split(/\s*,\s*|\s+/),"rotate"==e&&1==n.length&&n.push(0,0),"scale"==e&&(2<n.length?n=n.slice(0,2):2==n.length&&n.push(0,0),1==n.length&&n.push(n[0],0,0)),"skewX"==e?r.push(["m",1,0,c.tan(M(n[0])),1,0,0]):"skewY"==e?r.push(["m",1,c.tan(M(n[0])),0,1,0,0]):r.push([e.charAt(0)].concat(n)),t}),r},y._.rgTransform=/^[a-z][\s]*-?\.?\d/i,y._.transform2matrix=function(t,e){var n=V(t),r=new y.Matrix;if(n)for(var i=0,a=n.length;i<a;i++){var o,s,l,u,f,c=n[i],h=c.length,d=v(c[0]).toLowerCase(),p=c[0]!=d,g=p?r.invert():0;"t"==d&&2==h?r.translate(c[1],0):"t"==d&&3==h?p?(o=g.x(0,0),s=g.y(0,0),l=g.x(c[1],c[2]),u=g.y(c[1],c[2]),r.translate(l-o,u-s)):r.translate(c[1],c[2]):"r"==d?2==h?(f=f||e,r.rotate(c[1],f.x+f.width/2,f.y+f.height/2)):4==h&&(p?(l=g.x(c[2],c[3]),u=g.y(c[2],c[3]),r.rotate(c[1],l,u)):r.rotate(c[1],c[2],c[3])):"s"==d?2==h||3==h?(f=f||e,r.scale(c[1],c[h-1],f.x+f.width/2,f.y+f.height/2)):4==h?p?(l=g.x(c[2],c[3]),u=g.y(c[2],c[3]),r.scale(c[1],c[1],l,u)):r.scale(c[1],c[1],c[2],c[3]):5==h&&(p?(l=g.x(c[3],c[4]),u=g.y(c[3],c[4]),r.scale(c[1],c[2],l,u)):r.scale(c[1],c[2],c[3],c[4])):"m"==d&&7==h&&r.add(c[1],c[2],c[3],c[4],c[5],c[6])}return r},y._unit2px=function(n,r,i){var t=G(n).node,a={},e=t.querySelector(".svg---mgr");e||(D(e=D("rect"),{x:-9e9,y:-9e9,width:10,height:10,class:"svg---mgr",fill:"none"}),t.appendChild(e));function o(t){if(null==t)return b;if(t==+t)return t;D(e,{width:t});try{return e.getBBox().width}catch(t){return 0}}function s(t){if(null==t)return b;if(t==+t)return t;D(e,{height:t});try{return e.getBBox().height}catch(t){return 0}}function l(t,e){null==r?a[t]=e(n.attr(t)||0):t==r&&(a=e(null==i?n.attr(t)||0:i))}switch(n.type){case"rect":l("rx",o),l("ry",s);case"image":l("width",o),l("height",s);case"text":l("x",o),l("y",s);break;case"circle":l("cx",o),l("cy",s),l("r",o);break;case"ellipse":l("cx",o),l("cy",s),l("rx",o),l("ry",s);break;case"line":l("x1",o),l("x2",o),l("y1",s),l("y2",s);break;case"marker":l("refX",o),l("markerWidth",o),l("refY",s),l("markerHeight",s);break;case"radialGradient":l("fx",o),l("fy",s);break;case"tspan":l("dx",o),l("dy",s);break;default:l(r,o)}return t.removeChild(e),a};d.doc.contains||d.doc.compareDocumentPosition;function G(t){return t.node.ownerSVGElement&&$(t.node.ownerSVGElement)||y.select("svg")}function z(t){_(t,"array")||(t=Array.prototype.slice.call(arguments,0));for(var e=0,n=0,r=this.node;this[e];)delete this[e++];for(e=0;e<t.length;e++)"set"==t[e].type?t[e].forEach(function(t){r.appendChild(t.node)}):r.appendChild(t[e].node);var i=r.childNodes;for(e=0;e<i.length;e++)this[n++]=$(i[e]);return this}function R(t){if(t.snap in k)return k[t.snap];var e;try{e=t.ownerSVGElement}catch(t){}this.node=t,e&&(this.paper=new X(e)),this.type=t.tagName||t.nodeName;var n=this.id=A(this);if(this.anims={},this._={transform:[]},t.snap=n,"g"==(k[n]=this).type&&(this.add=z),this.type in{g:1,mask:1,pattern:1,symbol:1})for(var r in X.prototype)X.prototype[u](r)&&(this[r]=X.prototype[r])}function I(t){this.node=t}function U(t,e){var n=D(t);return e.appendChild(n),$(n)}function X(t,e){var n,r,i,a=X.prototype;if(t&&t.tagName&&"svg"==t.tagName.toLowerCase()){if(t.snap in k)return k[t.snap];var o=t.ownerDocument;for(var s in n=new R(t),r=t.getElementsByTagName("desc")[0],i=t.getElementsByTagName("defs")[0],r||((r=D("desc")).appendChild(o.createTextNode("Created with Snap")),n.node.appendChild(r)),i||(i=D("defs"),n.node.appendChild(i)),n.defs=i,a)a[u](s)&&(n[s]=a[s]);n.paper=n.root=n}else D((n=U("svg",d.doc.body)).node,{height:e,version:1.1,width:t,xmlns:S});return n}function $(t){return t?t instanceof R||t instanceof I?t:t.tagName&&"svg"==t.tagName.toLowerCase()?new X(t):t.tagName&&"object"==t.tagName.toLowerCase()&&"image/svg+xml"==t.type?new X(t.contentDocument.getElementsByTagName("svg")[0]):new R(t):t}y._.getSomeDefs=function(t){var e=t.node.ownerSVGElement&&$(t.node.ownerSVGElement)||t.node.parentNode&&$(t.node.parentNode)||y.select("svg")||y(0,0),n=e.select("defs"),r=null!=n&&n.node;return r||(r=U("defs",e.node).node),r},y._.getSomeSVG=G,y.select=function(t){return t=v(t).replace(/([^\\]):/g,"$1\\:"),$(d.doc.querySelector(t))},y.selectAll=function(t){for(var e=d.doc.querySelectorAll(t),n=(y.set||Array)(),r=0;r<e.length;r++)n.push($(e[r]));return n},setInterval(function(){for(var t in k)if(k[u](t)){var e=k[t],n=e.node;("svg"!=e.type&&!n.ownerSVGElement||"svg"==e.type&&(!n.parentNode||"ownerSVGElement"in n.parentNode&&!n.ownerSVGElement))&&delete k[t]}},1e4),R.prototype.attr=function(t,e){var n=this.node;if(!t){if(1!=n.nodeType)return{text:n.nodeValue};for(var r=n.attributes,i={},a=0,o=r.length;a<o;a++)i[r[a].nodeName]=r[a].nodeValue;return i}if(_(t,"string")){if(!(1<arguments.length))return Y("snap.util.getattr."+t,this).firstDefined();var s={};s[t]=e,t=s}for(var l in t)t[u](l)&&Y("snap.util.attr."+l,this,t[l]);return this},y.parse=function(t){var e=d.doc.createDocumentFragment(),n=!0,r=d.doc.createElement("div");if((t=v(t)).match(/^\s*<\s*svg(?:\s|>)/)||(t="<svg>"+t+"</svg>",n=!1),r.innerHTML=t,t=r.getElementsByTagName("svg")[0])if(n)e=t;else for(;t.firstChild;)e.appendChild(t.firstChild);return new I(e)},y.fragment=function(){for(var t=Array.prototype.slice.call(arguments,0),e=d.doc.createDocumentFragment(),n=0,r=t.length;n<r;n++){var i=t[n];i.node&&i.node.nodeType&&e.appendChild(i.node),i.nodeType&&e.appendChild(i),"string"==typeof i&&e.appendChild(y.parse(i).node)}return new I(e)},y._.make=U,y._.wrap=$,X.prototype.el=function(t,e){var n=U(t,this.node);return e&&n.attr(e),n},R.prototype.children=function(){for(var t=[],e=this.node.childNodes,n=0,r=e.length;n<r;n++)t[n]=y(e[n]);return t},R.prototype.toJSON=function(){var t=[];return function t(e,n){for(var r=0,i=e.length;r<i;r++){var a={type:e[r].type,attr:e[r].attr()},o=e[r].children();n.push(a),o.length&&t(o,a.childNodes=[])}}([this],t),t[0]},Y.on("snap.util.getattr",function(){var t=Y.nt(),e=(t=t.substring(t.lastIndexOf(".")+1)).replace(/[A-Z]/g,function(t){return"-"+t.toLowerCase()});return H[u](e)?this.node.ownerDocument.defaultView.getComputedStyle(this.node,null).getPropertyValue(e):D(this.node,t)});var H={"alignment-baseline":0,"baseline-shift":0,clip:0,"clip-path":0,"clip-rule":0,color:0,"color-interpolation":0,"color-interpolation-filters":0,"color-profile":0,"color-rendering":0,cursor:0,direction:0,display:0,"dominant-baseline":0,"enable-background":0,fill:0,"fill-opacity":0,"fill-rule":0,filter:0,"flood-color":0,"flood-opacity":0,font:0,"font-family":0,"font-size":0,"font-size-adjust":0,"font-stretch":0,"font-style":0,"font-variant":0,"font-weight":0,"glyph-orientation-horizontal":0,"glyph-orientation-vertical":0,"image-rendering":0,kerning:0,"letter-spacing":0,"lighting-color":0,marker:0,"marker-end":0,"marker-mid":0,"marker-start":0,mask:0,opacity:0,overflow:0,"pointer-events":0,"shape-rendering":0,"stop-color":0,"stop-opacity":0,stroke:0,"stroke-dasharray":0,"stroke-dashoffset":0,"stroke-linecap":0,"stroke-linejoin":0,"stroke-miterlimit":0,"stroke-opacity":0,"stroke-width":0,"text-anchor":0,"text-decoration":0,"text-rendering":0,"unicode-bidi":0,visibility:0,"word-spacing":0,"writing-mode":0};Y.on("snap.util.attr",function(t){var e=Y.nt(),n={};n[e=e.substring(e.lastIndexOf(".")+1)]=t;var r=e.replace(/-(\w)/gi,function(t,e){return e.toUpperCase()}),i=e.replace(/[A-Z]/g,function(t){return"-"+t.toLowerCase()});H[u](i)?this.node.style[r]=null==t?b:t:D(this.node,n)}),y.ajax=function(t,e,n,r){var i=new XMLHttpRequest,a=A();if(i){if(_(e,"function"))r=n,n=e,e=null;else if(_(e,"object")){var o=[];for(var s in e)e.hasOwnProperty(s)&&o.push(encodeURIComponent(s)+"="+encodeURIComponent(e[s]));e=o.join("&")}return i.open(e?"POST":"GET",t,!0),e&&(i.setRequestHeader("X-Requested-With","XMLHttpRequest"),i.setRequestHeader("Content-type","application/x-www-form-urlencoded")),n&&(Y.once("snap.ajax."+a+".0",n),Y.once("snap.ajax."+a+".200",n),Y.once("snap.ajax."+a+".304",n)),i.onreadystatechange=function(){4==i.readyState&&Y("snap.ajax."+a+"."+i.status,r,i)},4==i.readyState?i:(i.send(e),i)}},y.load=function(t,n,r){y.ajax(t,function(t){var e=y.parse(t.responseText);r?n.call(r,e):n(e)})};return y.getElementByPoint=function(t,e){this.canvas;var n,r,i,a,o,s,l,u=d.doc.elementFromPoint(t,e);if(d.win.opera&&"svg"==u.tagName){var f=(r=(n=u).getBoundingClientRect(),i=n.ownerDocument,a=i.body,o=i.documentElement,s=o.clientTop||a.clientTop||0,l=o.clientLeft||a.clientLeft||0,{y:r.top+(g.win.pageYOffset||o.scrollTop||a.scrollTop)-s,x:r.left+(g.win.pageXOffset||o.scrollLeft||a.scrollLeft)-l}),c=u.createSVGRect();c.x=t-f.x,c.y=e-f.y,c.width=c.height=1;var h=u.getIntersectionList(c,null);h.length&&(u=h[h.length-1])}return u?$(u):null},y.plugin=function(t){t(y,R,X,d,I)},d.win.Snap=y}(v||this);return e.plugin(function(p,t,e,n,r){var i=t.prototype,s=p.is,f=String,a=p._unit2px,g=p._.$,l=p._.make,u=p._.getSomeDefs,o=p._.wrap;i.getBBox=function(t){if("tspan"==this.type)return p._.box(this.node.getClientRects().item(0));if(!p.Matrix||!p.path)return this.node.getBBox();var e=this,n=new p.Matrix;if(e.removed)return p._.box();for(;"use"==e.type;)if(t||(n=n.add(e.transform().localMatrix.translate(e.attr("x")||0,e.attr("y")||0))),e.original)e=e.original;else{var r=e.attr("xlink:href");e=e.original=e.node.ownerDocument.getElementById(r.substring(r.indexOf("#")+1))}var i=e._,a=p.path.get[e.type]||p.path.get.deflt;try{return t?(i.bboxwt=a?p.path.getBBox(e.realPath=a(e)):p._.box(e.node.getBBox()),p._.box(i.bboxwt)):(e.realPath=a(e),e.matrix=e.transform().localMatrix,i.bbox=p.path.getBBox(p.path.map(e.realPath,n.add(e.matrix))),p._.box(i.bbox))}catch(t){return p._.box()}};var c=function(){return this.string};function h(t,e){if(null==e){var n=!0;if(!(e="linearGradient"==t.type||"radialGradient"==t.type?t.node.getAttribute("gradientTransform"):"pattern"==t.type?t.node.getAttribute("patternTransform"):t.node.getAttribute("transform")))return new p.Matrix;e=p._.svgTransform2string(e)}else e=p._.rgTransform.test(e)?f(e).replace(/\.{3}|\u2026/g,t._.transform||""):p._.svgTransform2string(e),s(e,"array")&&(e=p.path?p.path.toString.call(e):f(e)),t._.transform=e;var r=p._.transform2matrix(e,t.getBBox(1));if(n)return r;t.matrix=r}i.transform=function(t){var e=this._;if(null==t){for(var n,r=this,i=new p.Matrix(this.node.getCTM()),a=h(this),o=[a],s=new p.Matrix,l=a.toTransformString(),u=f(a)==f(this.matrix)?f(e.transform):l;"svg"!=r.type&&(r=r.parent());)o.push(h(r));for(n=o.length;n--;)s.add(o[n]);return{string:u,globalMatrix:i,totalMatrix:s,localMatrix:a,diffMatrix:i.clone().add(a.invert()),global:i.toTransformString(),total:s.toTransformString(),local:l,toString:c}}return t instanceof p.Matrix?(this.matrix=t,this._.transform=t.toTransformString()):h(this,t),this.node&&("linearGradient"==this.type||"radialGradient"==this.type?g(this.node,{gradientTransform:this.matrix}):"pattern"==this.type?g(this.node,{patternTransform:this.matrix}):g(this.node,{transform:this.matrix})),this},i.parent=function(){return o(this.node.parentNode)},i.append=i.add=function(t){if(t){if("set"==t.type){var e=this;return t.forEach(function(t){e.add(t)}),this}t=o(t),this.node.appendChild(t.node),t.paper=this.paper}return this},i.appendTo=function(t){return t&&(t=o(t)).append(this),this},i.prepend=function(t){if(t){if("set"==t.type){var e,n=this;return t.forEach(function(t){e?e.after(t):n.prepend(t),e=t}),this}var r=(t=o(t)).parent();this.node.insertBefore(t.node,this.node.firstChild),this.add&&this.add(),t.paper=this.paper,this.parent()&&this.parent().add(),r&&r.add()}return this},i.prependTo=function(t){return(t=o(t)).prepend(this),this},i.before=function(t){if("set"==t.type){var n=this;return t.forEach(function(t){var e=t.parent();n.node.parentNode.insertBefore(t.node,n.node),e&&e.add()}),this.parent().add(),this}var e=(t=o(t)).parent();return this.node.parentNode.insertBefore(t.node,this.node),this.parent()&&this.parent().add(),e&&e.add(),t.paper=this.paper,this},i.after=function(t){var e=(t=o(t)).parent();return this.node.nextSibling?this.node.parentNode.insertBefore(t.node,this.node.nextSibling):this.node.parentNode.appendChild(t.node),this.parent()&&this.parent().add(),e&&e.add(),t.paper=this.paper,this},i.insertBefore=function(t){t=o(t);var e=this.parent();return t.node.parentNode.insertBefore(this.node,t.node),this.paper=t.paper,e&&e.add(),t.parent()&&t.parent().add(),this},i.insertAfter=function(t){t=o(t);var e=this.parent();return t.node.parentNode.insertBefore(this.node,t.node.nextSibling),this.paper=t.paper,e&&e.add(),t.parent()&&t.parent().add(),this},i.remove=function(){var t=this.parent();return this.node.parentNode&&this.node.parentNode.removeChild(this.node),delete this.paper,this.removed=!0,t&&t.add(),this},i.select=function(t){return o(this.node.querySelector(t))},i.selectAll=function(t){for(var e=this.node.querySelectorAll(t),n=(p.set||Array)(),r=0;r<e.length;r++)n.push(o(e[r]));return n},i.asPX=function(t,e){return null==e&&(e=this.attr(t)),+a(this,t,e)},i.use=function(){var t,e=this.node.id;return e||(e=this.id,g(this.node,{id:e})),t="linearGradient"==this.type||"radialGradient"==this.type||"pattern"==this.type?l(this.type,this.node.parentNode):l("use",this.node.parentNode),g(t.node,{"xlink:href":"#"+e}),t.original=this,t},i.clone=function(){var t=o(this.node.cloneNode(!0));return g(t.node,"id")&&g(t.node,{id:t.id}),function(t){var e,n=t.selectAll("*"),i=/^\s*url\(("|'|)(.*)\1\)\s*$/,r=[],a={};function o(n,r){var t=g(n.node,r);(t=(t=t&&t.match(i))&&t[2])&&"#"==t.charAt()&&(t=t.substring(1))&&(a[t]=(a[t]||[]).concat(function(t){var e={};e[r]=p.url(t),g(n.node,e)}))}function s(e){var t=g(e.node,"xlink:href");t&&"#"==t.charAt()&&(t=t.substring(1))&&(a[t]=(a[t]||[]).concat(function(t){e.attr("xlink:href","#"+t)}))}for(var l=0,u=n.length;l<u;l++){o(e=n[l],"fill"),o(e,"stroke"),o(e,"filter"),o(e,"mask"),o(e,"clip-path"),s(e);var f=g(e.node,"id");f&&(g(e.node,{id:e.id}),r.push({old:f,id:e.id}))}for(l=0,u=r.length;l<u;l++){var c=a[r[l].old];if(c)for(var h=0,d=c.length;h<d;h++)c[h](r[l].id)}}(t),t.insertAfter(this),t},i.toDefs=function(){return u(this).appendChild(this.node),this},i.pattern=i.toPattern=function(t,e,n,r){var i=l("pattern",u(this));return null==t&&(t=this.getBBox()),s(t,"object")&&"x"in t&&(e=t.y,n=t.width,r=t.height,t=t.x),g(i.node,{x:t,y:e,width:n,height:r,patternUnits:"userSpaceOnUse",id:i.id,viewBox:[t,e,n,r].join(" ")}),i.node.appendChild(this.node),i},i.marker=function(t,e,n,r,i,a){var o=l("marker",u(this));return null==t&&(t=this.getBBox()),s(t,"object")&&"x"in t&&(e=t.y,n=t.width,r=t.height,i=t.refX||t.cx,a=t.refY||t.cy,t=t.x),g(o.node,{viewBox:[t,e,n,r].join(" "),markerWidth:n,markerHeight:r,orient:"auto",refX:i||0,refY:a||0,id:o.id}),o.node.appendChild(this.node),o};var d={};function y(a){return function(){var t=a?"<"+this.type:"",e=this.node.attributes,n=this.node.childNodes;if(a)for(var r=0,i=e.length;r<i;r++)t+=" "+e[r].name+'="'+e[r].value.replace(/"/g,'\\"')+'"';if(n.length){for(a&&(t+=">"),r=0,i=n.length;r<i;r++)3==n[r].nodeType?t+=n[r].nodeValue:1==n[r].nodeType&&(t+=o(n[r]).toString());a&&(t+="</"+this.type+">")}else a&&(t+="/>");return t}}i.data=function(t,e){var n=d[this.id]=d[this.id]||{};if(0==arguments.length)return Y("snap.data.get."+this.id,this,n,null),n;if(1==arguments.length){if(p.is(t,"object")){for(var r in t)t.hasOwnProperty(r)&&this.data(r,t[r]);return this}return Y("snap.data.get."+this.id,this,n[t],t),n[t]}return n[t]=e,Y("snap.data.set."+this.id,this,e,t),this},i.removeData=function(t){return null==t?d[this.id]={}:d[this.id]&&delete d[this.id][t],this},i.outerSVG=i.toString=y(1),i.innerSVG=y(),i.toDataURL=function(){if(v&&v.btoa){var t=this.getBBox(),e=p.format('<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="{width}" height="{height}" viewBox="{x} {y} {width} {height}">{contents}</svg>',{x:+t.x.toFixed(3),y:+t.y.toFixed(3),width:+t.width.toFixed(3),height:+t.height.toFixed(3),contents:this.outerSVG()});return"data:image/svg+xml;base64,"+btoa(unescape(encodeURIComponent(e)))}},r.prototype.select=i.select,r.prototype.selectAll=i.selectAll}),e.plugin(function(t,e,n,r,i){var a=e.prototype,y=t.is,v=String,m="hasOwnProperty";function x(n,r,i){return function(t){var e=t.slice(n,r);return 1==e.length&&(e=e[0]),i?i(e):e}}var b=function(t,e,n,r){"function"!=typeof n||n.length||(r=n,n=B.linear),this.attr=t,this.dur=e,n&&(this.easing=n),r&&(this.callback=r)};t._.Animation=b,t.animation=function(t,e,n,r){return new b(t,e,n,r)},a.inAnim=function(){var t=[];for(var e in this.anims)this.anims[m](e)&&function(e){t.push({anim:new b(e._attrs,e.dur,e.easing,e._callback),mina:e,curStatus:e.status(),status:function(t){return e.status(t)},stop:function(){e.stop()}})}(this.anims[e]);return t},t.animate=function(t,e,n,r,i,a){"function"!=typeof i||i.length||(a=i,i=B.linear);var o=B.time(),s=B(t,e,o,o+r,B.time,n,i);return a&&Y.once("mina.finish."+s.id,a),s},a.stop=function(){for(var t=this.inAnim(),e=0,n=t.length;e<n;e++)t[e].stop();return this},a.animate=function(t,e,n,r){"function"!=typeof n||n.length||(r=n,n=B.linear),t instanceof b&&(r=t.callback,n=t.easing,e=t.dur,t=t.attr);var i,a,o,s,l=[],u=[],f={},c=this;for(var h in t)if(t[m](h)){c.equal?(i=(s=c.equal(h,v(t[h]))).from,a=s.to,o=s.f):(i=+c.attr(h),a=+t[h]);var d=y(i,"array")?i.length:1;f[h]=x(l.length,l.length+d,o),l=l.concat(i),u=u.concat(a)}var p=B.time(),g=B(l,u,p,p+e,B.time,function(t){var e={};for(var n in f)f[m](n)&&(e[n]=f[n](t));c.attr(e)},n);return(c.anims[g.id]=g)._attrs=t,g._callback=r,Y("snap.animcreated."+c.id,g),Y.once("mina.finish."+g.id,function(){Y.off("mina.*."+g.id),delete c.anims[g.id],r&&r.call(c)}),Y.once("mina.stop."+g.id,function(){Y.off("mina.*."+g.id),delete c.anims[g.id]}),c}}),e.plugin(function(o,t,e,n,r){var s=Object.prototype.toString,l=String,u=Math;function f(t,e,n,r,i,a){if(null==e&&"[object SVGMatrix]"==s.call(t))return this.a=t.a,this.b=t.b,this.c=t.c,this.d=t.d,this.e=t.e,void(this.f=t.f);null!=t?(this.a=+t,this.b=+e,this.c=+n,this.d=+r,this.e=+i,this.f=+a):(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0)}!function(t){function i(t){return t[0]*t[0]+t[1]*t[1]}function a(t){var e=u.sqrt(i(t));t[0]&&(t[0]/=e),t[1]&&(t[1]/=e)}t.add=function(t,e,n,r,i,a){if(t&&t instanceof f)return this.add(t.a,t.b,t.c,t.d,t.e,t.f);var o=t*this.a+e*this.c,s=t*this.b+e*this.d;return this.e+=i*this.a+a*this.c,this.f+=i*this.b+a*this.d,this.c=n*this.a+r*this.c,this.d=n*this.b+r*this.d,this.a=o,this.b=s,this},f.prototype.multLeft=function(t,e,n,r,i,a){if(t&&t instanceof f)return this.multLeft(t.a,t.b,t.c,t.d,t.e,t.f);var o=t*this.a+n*this.b,s=t*this.c+n*this.d,l=t*this.e+n*this.f+i;return this.b=e*this.a+r*this.b,this.d=e*this.c+r*this.d,this.f=e*this.e+r*this.f+a,this.a=o,this.c=s,this.e=l,this},t.invert=function(){var t=this,e=t.a*t.d-t.b*t.c;return new f(t.d/e,-t.b/e,-t.c/e,t.a/e,(t.c*t.f-t.d*t.e)/e,(t.b*t.e-t.a*t.f)/e)},t.clone=function(){return new f(this.a,this.b,this.c,this.d,this.e,this.f)},t.translate=function(t,e){return this.e+=t*this.a+e*this.c,this.f+=t*this.b+e*this.d,this},t.scale=function(t,e,n,r){return null==e&&(e=t),(n||r)&&this.translate(n,r),this.a*=t,this.b*=t,this.c*=e,this.d*=e,(n||r)&&this.translate(-n,-r),this},t.rotate=function(t,e,n){t=o.rad(t),e=e||0,n=n||0;var r=+u.cos(t).toFixed(9),i=+u.sin(t).toFixed(9);return this.add(r,i,-i,r,e,n),this.add(1,0,0,1,-e,-n)},t.skewX=function(t){return this.skew(t,0)},t.skewY=function(t){return this.skew(0,t)},t.skew=function(t,e){t=t||0,e=e||0,t=o.rad(t),e=o.rad(e);var n=u.tan(t).toFixed(9),r=u.tan(e).toFixed(9);return this.add(1,r,n,1,0,0)},t.x=function(t,e){return t*this.a+e*this.c+this.e},t.y=function(t,e){return t*this.b+e*this.d+this.f},t.get=function(t){return+this[l.fromCharCode(97+t)].toFixed(4)},t.toString=function(){return"matrix("+[this.get(0),this.get(1),this.get(2),this.get(3),this.get(4),this.get(5)].join()+")"},t.offset=function(){return[this.e.toFixed(4),this.f.toFixed(4)]},t.determinant=function(){return this.a*this.d-this.b*this.c},t.split=function(){var t={};t.dx=this.e,t.dy=this.f;var e=[[this.a,this.b],[this.c,this.d]];t.scalex=u.sqrt(i(e[0])),a(e[0]),t.shear=e[0][0]*e[1][0]+e[0][1]*e[1][1],e[1]=[e[1][0]-e[0][0]*t.shear,e[1][1]-e[0][1]*t.shear],t.scaley=u.sqrt(i(e[1])),a(e[1]),t.shear/=t.scaley,this.determinant()<0&&(t.scalex=-t.scalex);var n=e[0][1],r=e[1][1];return r<0?(t.rotate=o.deg(u.acos(r)),n<0&&(t.rotate=360-t.rotate)):t.rotate=o.deg(u.asin(n)),t.isSimple=!(+t.shear.toFixed(9)||t.scalex.toFixed(9)!=t.scaley.toFixed(9)&&t.rotate),t.isSuperSimple=!+t.shear.toFixed(9)&&t.scalex.toFixed(9)==t.scaley.toFixed(9)&&!t.rotate,t.noRotation=!+t.shear.toFixed(9)&&!t.rotate,t},t.toTransformString=function(t){var e=t||this.split();return+e.shear.toFixed(9)?"m"+[this.get(0),this.get(1),this.get(2),this.get(3),this.get(4),this.get(5)]:(e.scalex=+e.scalex.toFixed(4),e.scaley=+e.scaley.toFixed(4),e.rotate=+e.rotate.toFixed(4),(e.dx||e.dy?"t"+[+e.dx.toFixed(4),+e.dy.toFixed(4)]:"")+(e.rotate?"r"+[+e.rotate.toFixed(4),0,0]:"")+(1!=e.scalex||1!=e.scaley?"s"+[e.scalex,e.scaley,0,0]:""))}}(f.prototype),o.Matrix=f,o.matrix=function(t,e,n,r,i,a){return new f(t,e,n,r,i,a)}}),e.plugin(function(a,o,t,i,s){var e,r=a._.make,l=a._.wrap,u=a.is,f=a._.getSomeDefs,n=/^url\((['"]?)([^)]+)\1\)$/,c=a._.$,h=a.url,d=String,p=a._.separator,g="";function y(i){return function(t){if(Y.stop(),t instanceof s&&1==t.node.childNodes.length&&("radialGradient"==t.node.firstChild.tagName||"linearGradient"==t.node.firstChild.tagName||"pattern"==t.node.firstChild.tagName)&&(t=t.node.firstChild,f(this).appendChild(t),t=l(t)),t instanceof o)if("radialGradient"==t.type||"linearGradient"==t.type||"pattern"==t.type){t.node.id||c(t.node,{id:t.id});var e=h(t.node.id)}else e=t.attr(i);else if((e=a.color(t)).error){var n=a(f(this).ownerSVGElement).gradient(t);n?(n.node.id||c(n.node,{id:n.id}),e=h(n.node.id)):e=t}else e=d(e);var r={};r[i]=e,c(this.node,r),this.node.style[i]=g}}a.deurl=function(t){var e=String(t).match(n);return e?e[2]:t},Y.on("snap.util.attr.mask",function(t){if(t instanceof o||t instanceof s){if(Y.stop(),t instanceof s&&1==t.node.childNodes.length&&(t=t.node.firstChild,f(this).appendChild(t),t=l(t)),"mask"==t.type)var e=t;else(e=r("mask",f(this))).node.appendChild(t.node);!e.node.id&&c(e.node,{id:e.id}),c(this.node,{mask:h(e.id)})}}),e=function(t){if(t instanceof o||t instanceof s){Y.stop();for(var e,n=t.node;n;){if("clipPath"===n.nodeName){e=new o(n);break}if("svg"===n.nodeName){e=void 0;break}n=n.parentNode}e||((e=r("clipPath",f(this))).node.appendChild(t.node),!e.node.id&&c(e.node,{id:e.id})),c(this.node,{"clip-path":h(e.node.id||e.id)})}},Y.on("snap.util.attr.clip",e),Y.on("snap.util.attr.clip-path",e),Y.on("snap.util.attr.clipPath",e),Y.on("snap.util.attr.fill",y("fill")),Y.on("snap.util.attr.stroke",y("stroke"));var v=/^([lr])(?:\(([^)]*)\))?(.*)$/i;function m(t){Y.stop(),t==+t&&(t+="px"),this.node.style.fontSize=t}function x(){return Y.stop(),this.node.style.fontSize}Y.on("snap.util.grad.parse",function(t){var e=(t=d(t)).match(v);if(!e)return null;var n=e[1],r=e[2],i=e[3];1==(r=r.split(/\s*,\s*/).map(function(t){return+t==t?+t:t})).length&&0==r[0]&&(r=[]);var a=(i=(i=i.split("-")).map(function(t){var e={color:(t=t.split(":"))[0]};return t[1]&&(e.offset=parseFloat(t[1])),e})).length,o=0,s=0;function l(t,e){for(var n=(e-o)/(t-s),r=s;r<t;r++)i[r].offset=+(+o+n*(r-s)).toFixed(2);s=t,o=e}a--;for(var u=0;u<a;u++)"offset"in i[u]&&l(u,i[u].offset);return i[a].offset=i[a].offset||100,l(a,i[a].offset),{type:n,params:r,stops:i}}),Y.on("snap.util.attr.d",function(t){Y.stop(),u(t,"array")&&u(t[0],"array")&&(t=a.path.toString.call(t)),(t=d(t)).match(/[ruo]/i)&&(t=a.path.toAbsolute(t)),c(this.node,{d:t})})(-1),Y.on("snap.util.attr.#text",function(t){Y.stop(),t=d(t);for(var e=i.doc.createTextNode(t);this.node.firstChild;)this.node.removeChild(this.node.firstChild);this.node.appendChild(e)})(-1),Y.on("snap.util.attr.path",function(t){Y.stop(),this.attr({d:t})})(-1),Y.on("snap.util.attr.class",function(t){Y.stop(),this.node.className.baseVal=t})(-1),Y.on("snap.util.attr.viewBox",function(t){var e;e=u(t,"object")&&"x"in t?[t.x,t.y,t.width,t.height].join(" "):u(t,"array")?t.join(" "):t,c(this.node,{viewBox:e}),Y.stop()})(-1),Y.on("snap.util.attr.transform",function(t){this.transform(t),Y.stop()})(-1),Y.on("snap.util.attr.r",function(t){"rect"==this.type&&(Y.stop(),c(this.node,{rx:t,ry:t}))})(-1),Y.on("snap.util.attr.textpath",function(t){if(Y.stop(),"text"==this.type){var e,n,r;if(!t&&this.textPath){for(n=this.textPath;n.node.firstChild;)this.node.appendChild(n.node.firstChild);return n.remove(),void delete this.textPath}if(u(t,"string")){var i=f(this),a=l(i.parentNode).path(t);i.appendChild(a.node),e=a.id,a.attr({id:e})}else(t=l(t))instanceof o&&((e=t.attr("id"))||(e=t.id,t.attr({id:e})));if(e)if(n=this.textPath,r=this.node,n)n.attr({"xlink:href":"#"+e});else{for(n=c("textPath",{"xlink:href":"#"+e});r.firstChild;)n.appendChild(r.firstChild);r.appendChild(n),this.textPath=l(n)}}})(-1),Y.on("snap.util.attr.text",function(t){if("text"==this.type){for(var e=this.node,r=function(t){var e=c("tspan");if(u(t,"array"))for(var n=0;n<t.length;n++)e.appendChild(r(t[n]));else e.appendChild(i.doc.createTextNode(t));return e.normalize&&e.normalize(),e};e.firstChild;)e.removeChild(e.firstChild);for(var n=r(t);n.firstChild;)e.appendChild(n.firstChild)}Y.stop()})(-1),Y.on("snap.util.attr.fontSize",m)(-1),Y.on("snap.util.attr.font-size",m)(-1),Y.on("snap.util.getattr.transform",function(){return Y.stop(),this.transform()})(-1),Y.on("snap.util.getattr.textpath",function(){return Y.stop(),this.textPath})(-1),function(){function t(e){return function(){Y.stop();var t=i.doc.defaultView.getComputedStyle(this.node,null).getPropertyValue("marker-"+e);return"none"==t?t:a(i.doc.getElementById(t.match(n)[1]))}}function e(r){return function(t){Y.stop();var e="marker"+r.charAt(0).toUpperCase()+r.substring(1);if(""!=t&&t){if("marker"==t.type){var n=t.node.id;return n||c(t.node,{id:t.id}),void(this.node.style[e]=h(n))}}else this.node.style[e]="none"}}Y.on("snap.util.getattr.marker-end",t("end"))(-1),Y.on("snap.util.getattr.markerEnd",t("end"))(-1),Y.on("snap.util.getattr.marker-start",t("start"))(-1),Y.on("snap.util.getattr.markerStart",t("start"))(-1),Y.on("snap.util.getattr.marker-mid",t("mid"))(-1),Y.on("snap.util.getattr.markerMid",t("mid"))(-1),Y.on("snap.util.attr.marker-end",e("end"))(-1),Y.on("snap.util.attr.markerEnd",e("end"))(-1),Y.on("snap.util.attr.marker-start",e("start"))(-1),Y.on("snap.util.attr.markerStart",e("start"))(-1),Y.on("snap.util.attr.marker-mid",e("mid"))(-1),Y.on("snap.util.attr.markerMid",e("mid"))(-1)}(),Y.on("snap.util.getattr.r",function(){if("rect"==this.type&&c(this.node,"rx")==c(this.node,"ry"))return Y.stop(),c(this.node,"rx")})(-1),Y.on("snap.util.getattr.text",function(){if("text"==this.type||"tspan"==this.type){Y.stop();var t=function t(e){for(var n=[],r=e.childNodes,i=0,a=r.length;i<a;i++){var o=r[i];3==o.nodeType&&n.push(o.nodeValue),"tspan"==o.tagName&&(1==o.childNodes.length&&3==o.firstChild.nodeType?n.push(o.firstChild.nodeValue):n.push(t(o)))}return n}(this.node);return 1==t.length?t[0]:t}})(-1),Y.on("snap.util.getattr.#text",function(){return this.node.textContent})(-1),Y.on("snap.util.getattr.fill",function(t){if(!t){Y.stop();var e=Y("snap.util.getattr.fill",this,!0).firstDefined();return a(a.deurl(e))||e}})(-1),Y.on("snap.util.getattr.stroke",function(t){if(!t){Y.stop();var e=Y("snap.util.getattr.stroke",this,!0).firstDefined();return a(a.deurl(e))||e}})(-1),Y.on("snap.util.getattr.viewBox",function(){Y.stop();var t=c(this.node,"viewBox");return t?(t=t.split(p),a._.box(+t[0],+t[1],+t[2],+t[3])):void 0})(-1),Y.on("snap.util.getattr.points",function(){var t=c(this.node,"points");return Y.stop(),t?t.split(p):void 0})(-1),Y.on("snap.util.getattr.path",function(){var t=c(this.node,"d");return Y.stop(),t})(-1),Y.on("snap.util.getattr.class",function(){return this.node.className.baseVal})(-1),Y.on("snap.util.getattr.fontSize",x)(-1),Y.on("snap.util.getattr.font-size",x)(-1)}),e.plugin(function(t,e,n,r,i){var f=/\S+/g,u=String,a=e.prototype;a.addClass=function(t){var e,n,r,i=u(t||"").match(f)||[],a=this.node,o=a.className.baseVal,s=o.match(f)||[];if(i.length){for(e=0;n=i[e++];)~s.indexOf(n)||s.push(n);o!=(r=s.join(" "))&&(a.className.baseVal=r)}return this},a.removeClass=function(t){var e,n,r,i,a=u(t||"").match(f)||[],o=this.node,s=o.className.baseVal,l=s.match(f)||[];if(l.length){for(e=0;r=a[e++];)~(n=l.indexOf(r))&&l.splice(n,1);s!=(i=l.join(" "))&&(o.className.baseVal=i)}return this},a.hasClass=function(t){return!!~(this.node.className.baseVal.match(f)||[]).indexOf(t)},a.toggleClass=function(t,e){if(null!=e)return e?this.addClass(t):this.removeClass(t);var n,r,i,a,o=(t||"").match(f)||[],s=this.node,l=s.className.baseVal,u=l.match(f)||[];for(n=0;i=o[n++];)~(r=u.indexOf(i))?u.splice(r,1):u.push(i);return l!=(a=u.join(" "))&&(s.className.baseVal=a),this}}),e.plugin(function(t,e,n,r,i){var u={"+":function(t,e){return t+e},"-":function(t,e){return t-e},"/":function(t,e){return t/e},"*":function(t,e){return t*e}},f=String,c=/[a-z]+$/i,h=/^\s*([+\-\/*])\s*=\s*([\d.eE+\-]+)\s*([^\d\s]+)?\s*$/;function l(t){return t}Y.on("snap.util.attr",function(t){var e=f(t).match(h);if(e){var n=Y.nt(),r=n.substring(n.lastIndexOf(".")+1),i=this.attr(r),a={};Y.stop();var o=e[3]||"",s=i.match(c),l=u[e[1]];if(s&&s==o?t=l(parseFloat(i),+e[2]):(i=this.asPX(r),t=l(this.asPX(r),this.asPX(r,e[2]+o))),isNaN(i)||isNaN(t))return;a[r]=t,this.attr(a)}})(-10),Y.on("snap.util.equal",function(t,e){var n,r=f(this.attr(t)||""),i=f(e).match(h);if(i){Y.stop();var a=i[3]||"",o=r.match(c),s=u[i[1]];return o&&o==a?{from:parseFloat(r),to:s(parseFloat(r),+i[2]),f:(n=o,function(t){return+t.toFixed(3)+n})}:{from:r=this.asPX(t),to:s(r,this.asPX(t,i[2]+a)),f:l}}})(-10)}),e.plugin(function(d,e,t,a,n){var r=t.prototype,u=d.is;r.rect=function(t,e,n,r,i,a){var o;return null==a&&(a=i),u(t,"object")&&"[object Object]"==t?o=t:null!=t&&(o={x:t,y:e,width:n,height:r},null!=i&&(o.rx=i,o.ry=a)),this.el("rect",o)},r.circle=function(t,e,n){var r;return u(t,"object")&&"[object Object]"==t?r=t:null!=t&&(r={cx:t,cy:e,r:n}),this.el("circle",r)};var s=function(){function i(){this.parentNode.removeChild(this)}return function(t,e){var n=a.doc.createElement("img"),r=a.doc.body;n.style.cssText="position:absolute;left:-9999em;top:-9999em",n.onload=function(){e.call(n),n.onload=n.onerror=null,r.removeChild(n)},n.onerror=i,r.appendChild(n),n.src=t}}();r.image=function(t,e,n,r,i){var a=this.el("image");if(u(t,"object")&&"src"in t)a.attr(t);else if(null!=t){var o={"xlink:href":t,preserveAspectRatio:"none"};null!=e&&null!=n&&(o.x=e,o.y=n),null!=r&&null!=i?(o.width=r,o.height=i):s(t,function(){d._.$(a.node,{width:this.offsetWidth,height:this.offsetHeight})}),d._.$(a.node,o)}return a},r.ellipse=function(t,e,n,r){var i;return u(t,"object")&&"[object Object]"==t?i=t:null!=t&&(i={cx:t,cy:e,rx:n,ry:r}),this.el("ellipse",i)},r.path=function(t){var e;return u(t,"object")&&!u(t,"array")?e=t:t&&(e={d:t}),this.el("path",e)},r.group=r.g=function(t){var e=this.el("g");return 1==arguments.length&&t&&!t.type?e.attr(t):arguments.length&&e.add(Array.prototype.slice.call(arguments,0)),e},r.svg=function(t,e,n,r,i,a,o,s){var l={};return u(t,"object")&&null==e?l=t:(null!=t&&(l.x=t),null!=e&&(l.y=e),null!=n&&(l.width=n),null!=r&&(l.height=r),null!=i&&null!=a&&null!=o&&null!=s&&(l.viewBox=[i,a,o,s])),this.el("svg",l)},r.mask=function(t){var e=this.el("mask");return 1==arguments.length&&t&&!t.type?e.attr(t):arguments.length&&e.add(Array.prototype.slice.call(arguments,0)),e},r.ptrn=function(t,e,n,r,i,a,o,s){if(u(t,"object"))var l=t;else l={patternUnits:"userSpaceOnUse"},t&&(l.x=t),e&&(l.y=e),null!=n&&(l.width=n),null!=r&&(l.height=r),l.viewBox=null!=i&&null!=a&&null!=o&&null!=s?[i,a,o,s]:[t||0,e||0,n||0,r||0];return this.el("pattern",l)},r.use=function(t){return null!=t?(t instanceof e&&(t.attr("id")||t.attr({id:d._.id(t)}),t=t.attr("id")),"#"==String(t).charAt()&&(t=t.substring(1)),this.el("use",{"xlink:href":"#"+t})):e.prototype.use.call(this)},r.symbol=function(t,e,n,r){var i={};return null!=t&&null!=e&&null!=n&&null!=r&&(i.viewBox=[t,e,n,r]),this.el("symbol",i)},r.text=function(t,e,n){var r={};return u(t,"object")?r=t:null!=t&&(r={x:t,y:e,text:n||""}),this.el("text",r)},r.line=function(t,e,n,r){var i={};return u(t,"object")?i=t:null!=t&&(i={x1:t,x2:n,y1:e,y2:r}),this.el("line",i)},r.polyline=function(t){1<arguments.length&&(t=Array.prototype.slice.call(arguments,0));var e={};return u(t,"object")&&!u(t,"array")?e=t:null!=t&&(e={points:t}),this.el("polyline",e)},r.polygon=function(t){1<arguments.length&&(t=Array.prototype.slice.call(arguments,0));var e={};return u(t,"object")&&!u(t,"array")?e=t:null!=t&&(e={points:t}),this.el("polygon",e)},function(){var l=d._.$;function s(){return this.selectAll("stop")}function u(t,e){var n=l("stop"),r={offset:+e+"%"};t=d.color(t),r["stop-color"]=t.hex,t.opacity<1&&(r["stop-opacity"]=t.opacity),l(n,r);for(var i,a=this.stops(),o=0;o<a.length;o++){if(e<parseFloat(a[o].attr("offset"))){this.node.insertBefore(n,a[o].node),i=!0;break}}return i||this.node.appendChild(n),this}function f(){if("linearGradient"==this.type){var t=l(this.node,"x1")||0,e=l(this.node,"x2")||1,n=l(this.node,"y1")||0,r=l(this.node,"y2")||0;return d._.box(t,n,math.abs(e-t),math.abs(r-n))}var i=this.node.cx||.5,a=this.node.cy||.5,o=this.node.r||0;return d._.box(i-o,a-o,2*o,2*o)}function o(t){var e=t,n=this.stops();if("string"==typeof t&&(e=Y("snap.util.grad.parse",null,"l(0,0,0,1)"+t).firstDefined().stops),d.is(e,"array")){for(var r=0;r<n.length;r++)if(e[r]){var i=d.color(e[r].color),a={offset:e[r].offset+"%"};a["stop-color"]=i.hex,i.opacity<1&&(a["stop-opacity"]=i.opacity),n[r].attr(a)}else n[r].remove();for(r=n.length;r<e.length;r++)this.addStop(e[r].color,e[r].offset);return this}}function c(t,e,n,r,i){var a=d._.make("linearGradient",t);return a.stops=s,a.addStop=u,a.getBBox=f,a.setStops=o,null!=e&&l(a.node,{x1:e,y1:n,x2:r,y2:i}),a}function h(t,e,n,r,i,a){var o=d._.make("radialGradient",t);return o.stops=s,o.addStop=u,o.getBBox=f,null!=e&&l(o.node,{cx:e,cy:n,r:r}),null!=i&&null!=a&&l(o.node,{fx:i,fy:a}),o}r.gradient=function(t){return function(t,e){var n,r=Y("snap.util.grad.parse",null,e).firstDefined();if(!r)return null;r.params.unshift(t),n="l"==r.type.toLowerCase()?c.apply(0,r.params):h.apply(0,r.params),r.type!=r.type.toLowerCase()&&l(n.node,{gradientUnits:"userSpaceOnUse"});for(var i=r.stops,a=i.length,o=0;o<a;o++){var s=i[o];n.addStop(s.color,s.offset)}return n}(this.defs,t)},r.gradientLinear=function(t,e,n,r){return c(this.defs,t,e,n,r)},r.gradientRadial=function(t,e,n,r,i){return h(this.defs,t,e,n,r,i)},r.toString=function(){var t,e=this.node.ownerDocument,n=e.createDocumentFragment(),r=e.createElement("div"),i=this.node.cloneNode(!0);return n.appendChild(r),r.appendChild(i),d._.$(i,{xmlns:"http://www.w3.org/2000/svg"}),t=r.innerHTML,n.removeChild(n.firstChild),t},r.toDataURL=function(){if(v&&v.btoa)return"data:image/svg+xml;base64,"+btoa(unescape(encodeURIComponent(this)))},r.clear=function(){for(var t,e=this.node.firstChild;e;)t=e.nextSibling,"defs"!=e.tagName?e.parentNode.removeChild(e):r.clear.call({node:e}),e=t}}()}),e.plugin(function(U,y,t,e){var n=y.prototype,x=U.is,d=U._.clone,r="hasOwnProperty",i=/,?([a-z]),?/gi,b=parseFloat,X=Math,$=X.PI,C=X.min,w=X.max,m=X.pow,H=X.abs;function F(e){var n=F.ps=F.ps||{};return n[e]?n[e].sleep=100:n[e]={sleep:100},setTimeout(function(){for(var t in n)n[r](t)&&t!=e&&(n[t].sleep--,!n[t].sleep&&delete n[t])}),n[e]}function g(t,e,n,r){return null==t&&(t=e=n=r=0),null==e&&(e=t.y,n=t.width,r=t.height,t=t.x),{x:t,y:e,width:n,w:n,height:r,h:r,x2:t+n,y2:e+r,cx:t+n/2,cy:e+r/2,r1:X.min(n,r)/2,r2:X.max(n,r)/2,r0:X.sqrt(n*n+r*r)/2,path:c(t,e,n,r),vb:[t,e,n,r].join(" ")}}function B(){return this.join(",").replace(i,"$1")}function A(t){var e=d(t);return e.toString=B,e}function v(t,e,n,r,i,a,o,s,l){return null==l?T(t,e,n,r,i,a,o,s):E(t,e,n,r,i,a,o,s,function(t,e,n,r,i,a,o,s,l){if(l<0||T(t,e,n,r,i,a,o,s)<l)return;var u,f=.5,c=1-f;u=T(t,e,n,r,i,a,o,s,c);for(;.01<H(u-l);)u=T(t,e,n,r,i,a,o,s,c+=(u<l?1:-1)*(f/=2));return c}(t,e,n,r,i,a,o,s,l))}function a(d,p){function g(t){return+(+t).toFixed(3)}return U._.cacher(function(t,e,n){t instanceof y&&(t=t.attr("d"));for(var r,i,a,o,s,l="",u={},f=0,c=0,h=(t=V(t)).length;c<h;c++){if("M"==(a=t[c])[0])r=+a[1],i=+a[2];else{if(e<f+(o=v(r,i,a[1],a[2],a[3],a[4],a[5],a[6]))){if(p&&!u.start){if(l+=["C"+g((s=v(r,i,a[1],a[2],a[3],a[4],a[5],a[6],e-f)).start.x),g(s.start.y),g(s.m.x),g(s.m.y),g(s.x),g(s.y)],n)return l;u.start=l,l=["M"+g(s.x),g(s.y)+"C"+g(s.n.x),g(s.n.y),g(s.end.x),g(s.end.y),g(a[5]),g(a[6])].join(),f+=o,r=+a[5],i=+a[6];continue}if(!d&&!p)return s=v(r,i,a[1],a[2],a[3],a[4],a[5],a[6],e-f)}f+=o,r=+a[5],i=+a[6]}l+=a.shift()+a}return u.end=l,s=d?f:p?u:E(r,i,a[0],a[1],a[2],a[3],a[4],a[5],1)},null,U._.clone)}var o=a(1),s=a(),l=a(0,1);function E(t,e,n,r,i,a,o,s,l){var u=1-l,f=m(u,3),c=m(u,2),h=l*l,d=h*l,p=t+2*l*(n-t)+h*(i-2*n+t),g=e+2*l*(r-e)+h*(a-2*r+e),y=n+2*l*(i-n)+h*(o-2*i+n),v=r+2*l*(a-r)+h*(s-2*a+r);return{x:f*t+3*c*l*n+3*u*l*l*i+d*o,y:f*e+3*c*l*r+3*u*l*l*a+d*s,m:{x:p,y:g},n:{x:y,y:v},start:{x:u*t+l*n,y:u*e+l*r},end:{x:u*i+l*o,y:u*a+l*s},alpha:90-180*X.atan2(p-y,g-v)/$}}function S(t,e,n,r,i,a,o,s){U.is(t,"array")||(t=[t,e,n,r,i,a,o,s]);var l=O.apply(null,t);return g(l.min.x,l.min.y,l.max.x-l.min.x,l.max.y-l.min.y)}function k(t,e,n){return e>=t.x&&e<=t.x+t.width&&n>=t.y&&n<=t.y+t.height}function D(t,e){return t=g(t),k(e=g(e),t.x,t.y)||k(e,t.x2,t.y)||k(e,t.x,t.y2)||k(e,t.x2,t.y2)||k(t,e.x,e.y)||k(t,e.x2,e.y)||k(t,e.x,e.y2)||k(t,e.x2,e.y2)||(t.x<e.x2&&t.x>e.x||e.x<t.x2&&e.x>t.x)&&(t.y<e.y2&&t.y>e.y||e.y<t.y2&&e.y>t.y)}function _(t,e,n,r,i){return t*(t*(-3*e+9*n-9*r+3*i)+6*e-12*n+6*r)-3*e+3*n}function T(t,e,n,r,i,a,o,s,l){null==l&&(l=1);for(var u=(l=1<l?1:l<0?0:l)/2,f=[-.1252,.1252,-.3678,.3678,-.5873,.5873,-.7699,.7699,-.9041,.9041,-.9816,.9816],c=[.2491,.2491,.2335,.2335,.2032,.2032,.1601,.1601,.1069,.1069,.0472,.0472],h=0,d=0;d<12;d++){var p=u*f[d]+u,g=_(p,t,n,i,o),y=_(p,e,r,a,s),v=g*g+y*y;h+=c[d]*X.sqrt(v)}return u*h}function M(t,e,n,r,i,a,o,s){if(!(w(t,n)<C(i,o)||C(t,n)>w(i,o)||w(e,r)<C(a,s)||C(e,r)>w(a,s))){var l=(t-n)*(a-s)-(e-r)*(i-o);if(l){var u=((t*r-e*n)*(i-o)-(t-n)*(i*s-a*o))/l,f=((t*r-e*n)*(a-s)-(e-r)*(i*s-a*o))/l,c=+u.toFixed(2),h=+f.toFixed(2);if(!(c<+C(t,n).toFixed(2)||c>+w(t,n).toFixed(2)||c<+C(i,o).toFixed(2)||c>+w(i,o).toFixed(2)||h<+C(e,r).toFixed(2)||h>+w(e,r).toFixed(2)||h<+C(a,s).toFixed(2)||h>+w(a,s).toFixed(2)))return{x:u,y:f}}}}function N(t,e,n){if(!D(S(t),S(e)))return n?0:[];for(var r=~~(T.apply(0,t)/8),i=~~(T.apply(0,e)/8),a=[],o=[],s={},l=n?0:[],u=0;u<r+1;u++){var f=E.apply(0,t.concat(u/r));a.push({x:f.x,y:f.y,t:u/r})}for(u=0;u<i+1;u++)f=E.apply(0,e.concat(u/i)),o.push({x:f.x,y:f.y,t:u/i});for(u=0;u<r;u++)for(var c=0;c<i;c++){var h=a[u],d=a[u+1],p=o[c],g=o[c+1],y=H(d.x-h.x)<.001?"y":"x",v=H(g.x-p.x)<.001?"y":"x",m=M(h.x,h.y,d.x,d.y,p.x,p.y,g.x,g.y);if(m){if(s[m.x.toFixed(4)]==m.y.toFixed(4))continue;s[m.x.toFixed(4)]=m.y.toFixed(4);var x=h.t+H((m[y]-h[y])/(d[y]-h[y]))*(d.t-h.t),b=p.t+H((m[v]-p[v])/(g[v]-p[v]))*(g.t-p.t);0<=x&&x<=1&&0<=b&&b<=1&&(n?l++:l.push({x:m.x,y:m.y,t1:x,t2:b}))}}return l}function u(t,e,n){t=V(t),e=V(e);for(var r,i,a,o,s,l,u,f,c,h,d=n?0:[],p=0,g=t.length;p<g;p++){var y=t[p];if("M"==y[0])r=s=y[1],i=l=y[2];else{"C"==y[0]?(r=(c=[r,i].concat(y.slice(1)))[6],i=c[7]):(c=[r,i,r,i,s,l,s,l],r=s,i=l);for(var v=0,m=e.length;v<m;v++){var x=e[v];if("M"==x[0])a=u=x[1],o=f=x[2];else{"C"==x[0]?(a=(h=[a,o].concat(x.slice(1)))[6],o=h[7]):(h=[a,o,a,o,u,f,u,f],a=u,o=f);var b=N(c,h,n);if(n)d+=b;else{for(var F=0,C=b.length;F<C;F++)b[F].segment1=p,b[F].segment2=v,b[F].bez1=c,b[F].bez2=h;d=d.concat(b)}}}}}return d}function f(t){var e=F(t);if(e.bbox)return d(e.bbox);if(!t)return g();for(var n,r=0,i=0,a=[],o=[],s=0,l=(t=V(t)).length;s<l;s++)if("M"==(n=t[s])[0])r=n[1],i=n[2],a.push(r),o.push(i);else{var u=O(r,i,n[1],n[2],n[3],n[4],n[5],n[6]);a=a.concat(u.min.x,u.max.x),o=o.concat(u.min.y,u.max.y),r=n[5],i=n[6]}var f=C.apply(0,a),c=C.apply(0,o),h=g(f,c,w.apply(0,a)-f,w.apply(0,o)-c);return e.bbox=d(h),h}function c(t,e,n,r,i){if(i)return[["M",+t+ +i,e],["l",n-2*i,0],["a",i,i,0,0,1,i,i],["l",0,r-2*i],["a",i,i,0,0,1,-i,i],["l",2*i-n,0],["a",i,i,0,0,1,-i,-i],["l",0,2*i-r],["a",i,i,0,0,1,i,-i],["z"]];var a=[["M",t,e],["l",n,0],["l",0,r],["l",-n,0],["z"]];return a.toString=B,a}function j(t,e,n,r,i){if(null==i&&null==r&&(r=n),t=+t,e=+e,n=+n,r=+r,null!=i)var a=Math.PI/180,o=t+n*Math.cos(-r*a),s=t+n*Math.cos(-i*a),l=[["M",o,e+n*Math.sin(-r*a)],["A",n,n,0,+(180<i-r),0,s,e+n*Math.sin(-i*a)]];else l=[["M",t,e],["m",0,-r],["a",n,r,0,1,1,0,2*r],["a",n,r,0,1,1,0,-2*r],["z"]];return l.toString=B,l}var h=U._unit2px,p={path:function(t){return t.attr("path")},circle:function(t){var e=h(t);return j(e.cx,e.cy,e.r)},ellipse:function(t){var e=h(t);return j(e.cx||0,e.cy||0,e.rx,e.ry)},rect:function(t){var e=h(t);return c(e.x||0,e.y||0,e.width,e.height,e.rx,e.ry)},image:function(t){var e=h(t);return c(e.x||0,e.y||0,e.width,e.height)},line:function(t){return"M"+[t.attr("x1")||0,t.attr("y1")||0,t.attr("x2"),t.attr("y2")]},polyline:function(t){return"M"+t.attr("points")},polygon:function(t){return"M"+t.attr("points")+"z"},deflt:function(t){var e=t.node.getBBox();return c(e.x,e.y,e.width,e.height)}};function P(t){var e=F(t);if(e.abs)return A(e.abs);if(x(t,"array")&&x(t&&t[0],"array")||(t=U.parsePathString(t)),!t||!t.length)return[["M",0,0]];var n,r=[],i=0,a=0,o=0,s=0,l=0;"M"==t[0][0]&&(o=i=+t[0][1],s=a=+t[0][2],l++,r[0]=["M",i,a]);for(var u,f,c=3==t.length&&"M"==t[0][0]&&"R"==t[1][0].toUpperCase()&&"Z"==t[2][0].toUpperCase(),h=l,d=t.length;h<d;h++){if(r.push(u=[]),(n=(f=t[h])[0])!=n.toUpperCase())switch(u[0]=n.toUpperCase(),u[0]){case"A":u[1]=f[1],u[2]=f[2],u[3]=f[3],u[4]=f[4],u[5]=f[5],u[6]=+f[6]+i,u[7]=+f[7]+a;break;case"V":u[1]=+f[1]+a;break;case"H":u[1]=+f[1]+i;break;case"R":for(var p=[i,a].concat(f.slice(1)),g=2,y=p.length;g<y;g++)p[g]=+p[g]+i,p[++g]=+p[g]+a;r.pop(),r=r.concat(G(p,c));break;case"O":r.pop(),(p=j(i,a,f[1],f[2])).push(p[0]),r=r.concat(p);break;case"U":r.pop(),r=r.concat(j(i,a,f[1],f[2],f[3])),u=["U"].concat(r[r.length-1].slice(-2));break;case"M":o=+f[1]+i,s=+f[2]+a;default:for(g=1,y=f.length;g<y;g++)u[g]=+f[g]+(g%2?i:a)}else if("R"==n)p=[i,a].concat(f.slice(1)),r.pop(),r=r.concat(G(p,c)),u=["R"].concat(f.slice(-2));else if("O"==n)r.pop(),(p=j(i,a,f[1],f[2])).push(p[0]),r=r.concat(p);else if("U"==n)r.pop(),r=r.concat(j(i,a,f[1],f[2],f[3])),u=["U"].concat(r[r.length-1].slice(-2));else for(var v=0,m=f.length;v<m;v++)u[v]=f[v];if("O"!=(n=n.toUpperCase()))switch(u[0]){case"Z":i=+o,a=+s;break;case"H":i=u[1];break;case"V":a=u[1];break;case"M":o=u[u.length-2],s=u[u.length-1];default:i=u[u.length-2],a=u[u.length-1]}}return r.toString=B,e.abs=A(r),r}function L(t,e,n,r){return[t,e,n,r,n,r]}function q(t,e,n,r,i,a){return[1/3*t+2/3*n,1/3*e+2/3*r,1/3*i+2/3*n,1/3*a+2/3*r,i,a]}function O(t,e,n,r,i,a,o,s){for(var l,u,f,c,h,d,p,g,y=[],v=[[],[]],m=0;m<2;++m)if(0==m?(u=6*t-12*n+6*i,l=-3*t+9*n-9*i+3*o,f=3*n-3*t):(u=6*e-12*r+6*a,l=-3*e+9*r-9*a+3*s,f=3*r-3*e),H(l)<1e-12){if(H(u)<1e-12)continue;0<(c=-f/u)&&c<1&&y.push(c)}else p=u*u-4*f*l,g=X.sqrt(p),p<0||(0<(h=(-u+g)/(2*l))&&h<1&&y.push(h),0<(d=(-u-g)/(2*l))&&d<1&&y.push(d));for(var x,b=y.length,F=b;b--;)x=1-(c=y[b]),v[0][b]=x*x*x*t+3*x*x*c*n+3*x*c*c*i+c*c*c*o,v[1][b]=x*x*x*e+3*x*x*c*r+3*x*c*c*a+c*c*c*s;return v[0][F]=t,v[1][F]=e,v[0][F+1]=o,v[1][F+1]=s,v[0].length=v[1].length=F+2,{min:{x:C.apply(0,v[0]),y:C.apply(0,v[1])},max:{x:w.apply(0,v[0]),y:w.apply(0,v[1])}}}function V(t,e){var n=!e&&F(t);if(!e&&n.curve)return A(n.curve);for(var a=P(t),o=e&&P(e),r={x:0,y:0,bx:0,by:0,X:0,Y:0,qx:null,qy:null},i={x:0,y:0,bx:0,by:0,X:0,Y:0,qx:null,qy:null},s=function(t,e,n){var r,i;if(!t)return["C",e.x,e.y,e.x,e.y,e.x,e.y];switch(!(t[0]in{T:1,Q:1})&&(e.qx=e.qy=null),t[0]){case"M":e.X=t[1],e.Y=t[2];break;case"A":t=["C"].concat(function t(e,n,r,i,a,o,s,l,u,f){var c,h=120*$/180,d=$/180*(+a||0),p=[],g=U._.cacher(function(t,e,n){return{x:t*X.cos(n)-e*X.sin(n),y:t*X.sin(n)+e*X.cos(n)}});if(!r||!i)return[e,n,l,u,l,u];if(f)B=f[0],A=f[1],C=f[2],w=f[3];else{e=(c=g(e,n,-d)).x,n=c.y,l=(c=g(l,u,-d)).x,u=c.y,X.cos($/180*a),X.sin($/180*a);var y=(e-l)/2,v=(n-u)/2,m=y*y/(r*r)+v*v/(i*i);1<m&&(r*=m=X.sqrt(m),i*=m);var x=r*r,b=i*i,F=(o==s?-1:1)*X.sqrt(H((x*b-x*v*v-b*y*y)/(x*v*v+b*y*y))),C=F*r*v/i+(e+l)/2,w=F*-i*y/r+(n+u)/2,B=X.asin(((n-w)/i).toFixed(9)),A=X.asin(((u-w)/i).toFixed(9));(B=e<C?$-B:B)<0&&(B=2*$+B),(A=l<C?$-A:A)<0&&(A=2*$+A),s&&A<B&&(B-=2*$),!s&&B<A&&(A-=2*$)}var E=A-B;if(H(E)>h){var S=A,k=l,D=u;A=B+h*(s&&B<A?1:-1),p=t(l=C+r*X.cos(A),u=w+i*X.sin(A),r,i,a,0,s,k,D,[A,S,C,w])}E=A-B;var _=X.cos(B),T=X.sin(B),M=X.cos(A),N=X.sin(A),j=X.tan(E/4),P=4/3*r*j,L=4/3*i*j,q=[e,n],O=[e+P*T,n-L*_],V=[l+P*N,u-L*M],G=[l,u];if(O[0]=2*q[0]-O[0],O[1]=2*q[1]-O[1],f)return[O,V,G].concat(p);for(var z=[],R=0,I=(p=[O,V,G].concat(p).join().split(",")).length;R<I;R++)z[R]=R%2?g(p[R-1],p[R],d).y:g(p[R],p[R+1],d).x;return z}.apply(0,[e.x,e.y].concat(t.slice(1))));break;case"S":"C"==n||"S"==n?(r=2*e.x-e.bx,i=2*e.y-e.by):(r=e.x,i=e.y),t=["C",r,i].concat(t.slice(1));break;case"T":"Q"==n||"T"==n?(e.qx=2*e.x-e.qx,e.qy=2*e.y-e.qy):(e.qx=e.x,e.qy=e.y),t=["C"].concat(q(e.x,e.y,e.qx,e.qy,t[1],t[2]));break;case"Q":e.qx=t[1],e.qy=t[2],t=["C"].concat(q(e.x,e.y,t[1],t[2],t[3],t[4]));break;case"L":t=["C"].concat(L(e.x,e.y,t[1],t[2]));break;case"H":t=["C"].concat(L(e.x,e.y,t[1],e.y));break;case"V":t=["C"].concat(L(e.x,e.y,e.x,t[1]));break;case"Z":t=["C"].concat(L(e.x,e.y,e.X,e.Y))}return t},l=function(t,e){if(7<t[e].length){t[e].shift();for(var n=t[e];n.length;)f[e]="A",o&&(c[e]="A"),t.splice(e++,0,["C"].concat(n.splice(0,6)));t.splice(e,1),g=w(a.length,o&&o.length||0)}},u=function(t,e,n,r,i){t&&e&&"M"==t[i][0]&&"M"!=e[i][0]&&(e.splice(i,0,["M",r.x,r.y]),n.bx=0,n.by=0,n.x=t[i][1],n.y=t[i][2],g=w(a.length,o&&o.length||0))},f=[],c=[],h="",d="",p=0,g=w(a.length,o&&o.length||0);p<g;p++){a[p]&&(h=a[p][0]),"C"!=h&&(f[p]=h,p&&(d=f[p-1])),a[p]=s(a[p],r,d),"A"!=f[p]&&"C"==h&&(f[p]="C"),l(a,p),o&&(o[p]&&(h=o[p][0]),"C"!=h&&(c[p]=h,p&&(d=c[p-1])),o[p]=s(o[p],i,d),"A"!=c[p]&&"C"==h&&(c[p]="C"),l(o,p)),u(a,o,r,i,p),u(o,a,i,r,p);var y=a[p],v=o&&o[p],m=y.length,x=o&&v.length;r.x=y[m-2],r.y=y[m-1],r.bx=b(y[m-4])||r.x,r.by=b(y[m-3])||r.y,i.bx=o&&(b(v[x-4])||i.x),i.by=o&&(b(v[x-3])||i.y),i.x=o&&v[x-2],i.y=o&&v[x-1]}return o||(n.curve=A(a)),o?[a,o]:a}function G(t,e){for(var n=[],r=0,i=t.length;r<i-2*!e;r+=2){var a=[{x:+t[r-2],y:+t[r-1]},{x:+t[r],y:+t[r+1]},{x:+t[r+2],y:+t[r+3]},{x:+t[r+4],y:+t[r+5]}];e?r?i-4==r?a[3]={x:+t[0],y:+t[1]}:i-2==r&&(a[2]={x:+t[0],y:+t[1]},a[3]={x:+t[2],y:+t[3]}):a[0]={x:+t[i-2],y:+t[i-1]}:i-4==r?a[3]=a[2]:r||(a[0]={x:+t[r],y:+t[r+1]}),n.push(["C",(-a[0].x+6*a[1].x+a[2].x)/6,(-a[0].y+6*a[1].y+a[2].y)/6,(a[1].x+6*a[2].x-a[3].x)/6,(a[1].y+6*a[2].y-a[3].y)/6,a[2].x,a[2].y])}return n}U.path=F,U.path.getTotalLength=o,U.path.getPointAtLength=s,U.path.getSubpath=function(t,e,n){if(this.getTotalLength(t)-n<1e-6)return l(t,e).end;var r=l(t,n,1);return e?l(r,e).end:r},n.getTotalLength=function(){if(this.node.getTotalLength)return this.node.getTotalLength()},n.getPointAtLength=function(t){return s(this.attr("d"),t)},n.getSubpath=function(t,e){return U.path.getSubpath(this.attr("d"),t,e)},U._.box=g,U.path.findDotsAtSegment=E,U.path.bezierBBox=S,U.path.isPointInsideBBox=k,U.closest=function(t,e,n,r){for(var i=100,a=g(t-i/2,e-i/2,i,i),o=[],s=n[0].hasOwnProperty("x")?function(t){return{x:n[t].x,y:n[t].y}}:function(t){return{x:n[t],y:r[t]}},l=0;i<=1e6&&!l;){for(var u=0,f=n.length;u<f;u++){var c=s(u);if(k(a,c.x,c.y)){l++,o.push(c);break}}l||(a=g(t-(i*=2)/2,e-i/2,i,i))}if(1e6!=i){var h,d=1/0;for(u=0,f=o.length;u<f;u++){var p=U.len(t,e,o[u].x,o[u].y);p<d&&(d=p,o[u].len=p,h=o[u])}return h}},U.path.isBBoxIntersect=D,U.path.intersection=function(t,e){return u(t,e)},U.path.intersectionNumber=function(t,e){return u(t,e,1)},U.path.isPointInside=function(t,e,n){var r=f(t);return k(r,e,n)&&u(t,[["M",e,n],["H",r.x2+10]],1)%2==1},U.path.getBBox=f,U.path.get=p,U.path.toRelative=function(t){var e=F(t),n=String.prototype.toLowerCase;if(e.rel)return A(e.rel);U.is(t,"array")&&U.is(t&&t[0],"array")||(t=U.parsePathString(t));var r=[],i=0,a=0,o=0,s=0,l=0;"M"==t[0][0]&&(o=i=t[0][1],s=a=t[0][2],l++,r.push(["M",i,a]));for(var u=l,f=t.length;u<f;u++){var c=r[u]=[],h=t[u];if(h[0]!=n.call(h[0]))switch(c[0]=n.call(h[0]),c[0]){case"a":c[1]=h[1],c[2]=h[2],c[3]=h[3],c[4]=h[4],c[5]=h[5],c[6]=+(h[6]-i).toFixed(3),c[7]=+(h[7]-a).toFixed(3);break;case"v":c[1]=+(h[1]-a).toFixed(3);break;case"m":o=h[1],s=h[2];default:for(var d=1,p=h.length;d<p;d++)c[d]=+(h[d]-(d%2?i:a)).toFixed(3)}else{c=r[u]=[],"m"==h[0]&&(o=h[1]+i,s=h[2]+a);for(var g=0,y=h.length;g<y;g++)r[u][g]=h[g]}var v=r[u].length;switch(r[u][0]){case"z":i=o,a=s;break;case"h":i+=+r[u][v-1];break;case"v":a+=+r[u][v-1];break;default:i+=+r[u][v-2],a+=+r[u][v-1]}}return r.toString=B,e.rel=A(r),r},U.path.toAbsolute=P,U.path.toCubic=V,U.path.map=function(t,e){if(!e)return t;var n,r,i,a,o,s,l;for(i=0,o=(t=V(t)).length;i<o;i++)for(a=1,s=(l=t[i]).length;a<s;a+=2)n=e.x(l[a],l[a+1]),r=e.y(l[a],l[a+1]),l[a]=n,l[a+1]=r;return t},U.path.toString=B,U.path.clone=A}),e.plugin(function(c,t,e,n){var l=Math.max,u=Math.min,f=function(t){if(this.items=[],this.bindings={},this.length=0,this.type="set",t)for(var e=0,n=t.length;e<n;e++)t[e]&&(this[this.items.length]=this.items[this.items.length]=t[e],this.length++)},r=f.prototype;r.push=function(){for(var t,e,n=0,r=arguments.length;n<r;n++)(t=arguments[n])&&(this[e=this.items.length]=this.items[e]=t,this.length++);return this},r.pop=function(){return this.length&&delete this[this.length--],this.items.pop()},r.forEach=function(t,e){for(var n=0,r=this.items.length;n<r;n++)if(!1===t.call(e,this.items[n],n))return this;return this},r.animate=function(n,r,i,t){"function"!=typeof i||i.length||(t=i,i=B.linear),n instanceof c._.Animation&&(t=n.callback,i=n.easing,r=i.dur,n=n.attr);var a=arguments;if(c.is(n,"array")&&c.is(a[a.length-1],"array"))var o=!0;var e,s=function(){e?this.b=e:e=this.b},l=0,u=this,f=t&&function(){++l==u.length&&t.call(this)};return this.forEach(function(t,e){Y.once("snap.animcreated."+t.id,s),o?a[e]&&t.animate.apply(t,a[e]):t.animate(n,r,i,f)})},r.remove=function(){for(;this.length;)this.pop().remove();return this},r.bind=function(t,e,n){var r={};if("function"==typeof e)this.bindings[t]=e;else{var i=n||t;this.bindings[t]=function(t){r[i]=t,e.attr(r)}}return this},r.attr=function(t){var e={};for(var n in t)this.bindings[n]?this.bindings[n](t[n]):e[n]=t[n];for(var r=0,i=this.items.length;r<i;r++)this.items[r].attr(e);return this},r.clear=function(){for(;this.length;)this.pop()},r.splice=function(t,e,n){t=t<0?l(this.length+t,0):t,e=l(0,u(this.length-t,e));var r,i=[],a=[],o=[];for(r=2;r<arguments.length;r++)o.push(arguments[r]);for(r=0;r<e;r++)a.push(this[t+r]);for(;r<this.length-t;r++)i.push(this[t+r]);var s=o.length;for(r=0;r<s+i.length;r++)this.items[t+r]=this[t+r]=r<s?o[r]:i[r-s];for(r=this.items.length=this.length-=e-s;this[r];)delete this[r++];return new f(a)},r.exclude=function(t){for(var e=0,n=this.length;e<n;e++)if(this[e]==t)return this.splice(e,1),!0;return!1},r.insertAfter=function(t){for(var e=this.items.length;e--;)this.items[e].insertAfter(t);return this},r.getBBox=function(){for(var t=[],e=[],n=[],r=[],i=this.items.length;i--;)if(!this.items[i].removed){var a=this.items[i].getBBox();t.push(a.x),e.push(a.y),n.push(a.x+a.width),r.push(a.y+a.height)}return{x:t=u.apply(0,t),y:e=u.apply(0,e),x2:n=l.apply(0,n),y2:r=l.apply(0,r),width:n-t,height:r-e,cx:t+(n-t)/2,cy:e+(r-e)/2}},r.clone=function(t){t=new f;for(var e=0,n=this.items.length;e<n;e++)t.push(this.items[e].clone());return t},r.toString=function(){return"Snap‘s set"},r.type="set",c.Set=f,c.set=function(){var t=new f;return arguments.length&&t.push.apply(t,Array.prototype.slice.call(arguments,0)),t}}),e.plugin(function(c,t,e,n){var h={},d=/[%a-z]+$/i,p=String;function g(t){var e=t[0];switch(e.toLowerCase()){case"t":return[e,0,0];case"m":return[e,1,0,0,1,0,0];case"r":return 4==t.length?[e,0,t[2],t[3]]:[e,0];case"s":return 5==t.length?[e,1,1,t[3],t[4]]:3==t.length?[e,1,1]:[e,1]}}function y(t){return t}function v(t){return t.join(" ")}function m(t){return c.rgb(t[0],t[1],t[2],t[3])}function x(t){var e,n,r,i,a,o,s=0,l=[];for(e=0,n=t.length;e<n;e++){for(a="[",o=['"'+t[e][0]+'"'],r=1,i=t[e].length;r<i;r++)o[r]="val["+s+++"]";a+=o+"]",l[e]=a}return Function("val","return Snap.path.toString.call(["+l+"])")}function b(t){for(var e=[],n=0,r=t.length;n<r;n++)for(var i=1,a=t[n].length;i<a;i++)e.push(t[n][i]);return e}function F(t){return isFinite(t)}h.stroke=h.fill="colour",t.prototype.equal=function(t,e){return Y("snap.util.equal",this,t,e).firstDefined()},Y.on("snap.util.equal",function(t,e){var n,r,i=p(this.attr(t)||""),a=this;if("colour"==h[t])return n=c.color(i),r=c.color(e),{from:[n.r,n.g,n.b,n.opacity],to:[r.r,r.g,r.b,r.opacity],f:m};if("viewBox"==t)return{from:n=this.attr(t).vb.split(" ").map(Number),to:r=e.split(" ").map(Number),f:v};if("transform"==t||"gradientTransform"==t||"patternTransform"==t)return"string"==typeof e&&(e=p(e).replace(/\.{3}|\u2026/g,i)),function(t,e,n){t=t||new c.Matrix,e=e||new c.Matrix,t=c.parseTransformString(t.toTransformString())||[],e=c.parseTransformString(e.toTransformString())||[];for(var r,i,a,o,s=Math.max(t.length,e.length),l=[],u=[],f=0;f<s;f++){if(a=t[f]||g(e[f]),o=e[f]||g(a),a[0]!=o[0]||"r"==a[0].toLowerCase()&&(a[2]!=o[2]||a[3]!=o[3])||"s"==a[0].toLowerCase()&&(a[3]!=o[3]||a[4]!=o[4])){t=c._.transform2matrix(t,n()),e=c._.transform2matrix(e,n()),l=[["m",t.a,t.b,t.c,t.d,t.e,t.f]],u=[["m",e.a,e.b,e.c,e.d,e.e,e.f]];break}for(l[f]=[],u[f]=[],r=0,i=Math.max(a.length,o.length);r<i;r++)r in a&&(l[f][r]=a[r]),r in o&&(u[f][r]=o[r])}return{from:b(l),to:b(u),f:x(l)}}(i=this.matrix,e=c._.rgTransform.test(e)?c._.transform2matrix(e,this.getBBox()):c._.transform2matrix(c._.svgTransform2string(e),this.getBBox()),function(){return a.getBBox(1)});if("d"==t||"path"==t)return{from:b((n=c.path.toCubic(i,e))[0]),to:b(n[1]),f:x(n[0])};if("points"==t)return{from:n=p(i).split(c._.separator),to:r=p(e).split(c._.separator),f:function(t){return t}};if(F(i)&&F(e))return{from:parseFloat(i),to:parseFloat(e),f:y};var o,s,l,u=i.match(d),f=p(e).match(d);return u&&(s=u,l=f,c.is(s,"array")&&c.is(l,"array")&&s.toString()==l.toString())?{from:parseFloat(i),to:parseFloat(e),f:(o=u,function(t){return+t.toFixed(3)+o})}:{from:this.asPX(t),to:this.asPX(t,e),f:y}})}),e.plugin(function(h,t,e,i){for(var n=t.prototype,d=("createTouch"in i.doc),r=["click","dblclick","mousedown","mousemove","mouseout","mouseover","mouseup","touchstart","touchmove","touchend","touchcancel"],p={mousedown:"touchstart",mousemove:"touchmove",mouseup:"touchend"},g=function(t,e){var n="y"==t?"scrollTop":"scrollLeft",r=e&&e.node?e.node.ownerDocument:i.doc;return r[n in r.documentElement?"documentElement":"body"][n]},y=function(){return this.originalEvent.preventDefault()},v=function(){return this.originalEvent.stopPropagation()},f=[],c=function(t){for(var e,n=t.clientX,r=t.clientY,i=g("y"),a=g("x"),o=f.length;o--;){if(e=f[o],d){for(var s,l=t.touches&&t.touches.length;l--;)if((s=t.touches[l]).identifier==e.el._drag.id||e.el.node.contains(s.target)){n=s.clientX,r=s.clientY,(t.originalEvent?t.originalEvent:t).preventDefault();break}}else t.preventDefault();var u=e.el.node;u.nextSibling,u.parentNode,u.style.display;n+=a,r+=i,Y("snap.drag.move."+e.el.id,e.move_scope||e.el,n-e.el._drag.x,r-e.el._drag.y,n,r,t)}},m=function(t){h.unmousemove(c).unmouseup(m);for(var e,n=f.length;n--;)(e=f[n]).el._drag={},Y("snap.drag.end."+e.el.id,e.end_scope||e.start_scope||e.move_scope||e.el,t),Y.off("snap.drag.*."+e.el.id);f=[]},a=r.length;a--;)!function(o){h[o]=n[o]=function(t,e){if(h.is(t,"function"))this.events=this.events||[],this.events.push({name:o,f:t,unbind:(l=this.node||document,u=o,f=t,c=e||this,i=d&&p[u]?p[u]:u,a=function(t){var e=g("y",c),n=g("x",c);if(d&&p.hasOwnProperty(u))for(var r=0,i=t.targetTouches&&t.targetTouches.length;r<i;r++)if(t.targetTouches[r].target==l||l.contains(t.targetTouches[r].target)){var a=t;(t=t.targetTouches[r]).originalEvent=a,t.preventDefault=y,t.stopPropagation=v;break}var o=t.clientX+n,s=t.clientY+e;return f.call(c,t,o,s)},u!==i&&l.addEventListener(u,a,!1),l.addEventListener(i,a,!1),function(){return u!==i&&l.removeEventListener(u,a,!1),l.removeEventListener(i,a,!1),!0})});else for(var n=0,r=this.events.length;n<r;n++)if(this.events[n].name==o)try{this.events[n].f.call(this)}catch(t){}var l,u,f,c,i,a;return this},h["un"+o]=n["un"+o]=function(t){for(var e=this.events||[],n=e.length;n--;)if(e[n].name==o&&(e[n].f==t||!t))return e[n].unbind(),e.splice(n,1),!e.length&&delete this.events,this;return this}}(r[a]);n.hover=function(t,e,n,r){return this.mouseover(t,n).mouseout(e,r||n)},n.unhover=function(t,e){return this.unmouseover(t).unmouseout(e)};var x=[];n.drag=function(r,i,a,o,s,l){var n,u=this;if(!arguments.length)return u.drag(function(t,e){this.attr({transform:n+(n?"T":"t")+[t,e]})},function(){n=this.transform().local});function t(t,e,n){(t.originalEvent||t).preventDefault(),u._drag.x=e,u._drag.y=n,u._drag.id=t.identifier,!f.length&&h.mousemove(c).mouseup(m),f.push({el:u,move_scope:o,start_scope:s,end_scope:l}),i&&Y.on("snap.drag.start."+u.id,i),r&&Y.on("snap.drag.move."+u.id,r),a&&Y.on("snap.drag.end."+u.id,a),Y("snap.drag.start."+u.id,s||o||u,e,n,t)}function e(t,e,n){Y("snap.draginit."+u.id,u,t,e,n)}return Y.on("snap.draginit."+u.id,t),u._drag={},x.push({el:u,start:t,init:e}),u.mousedown(e),u},n.undrag=function(){for(var t=x.length;t--;)x[t].el==this&&(this.unmousedown(x[t].init),x.splice(t,1),Y.unbind("snap.drag.*."+this.id),Y.unbind("snap.draginit."+this.id));return!x.length&&h.unmousemove(c).unmouseup(m),this}}),e.plugin(function(a,o,t,e){o.prototype;var n=t.prototype,r=/^\s*url\((.+)\)/,s=String,l=a._.$;a.filter={},n.filter=function(t){var e=this;"svg"!=e.type&&(e=e.paper);var n=a.parse(s(t)),r=a._.id(),i=(e.node.offsetWidth,e.node.offsetHeight,l("filter"));return l(i,{id:r,filterUnits:"userSpaceOnUse"}),i.appendChild(n.node),e.defs.appendChild(i),new o(i)},Y.on("snap.util.getattr.filter",function(){Y.stop();var t=l(this.node,"filter");if(t){var e=s(t).match(r);return e&&a.select(e[1])}}),Y.on("snap.util.attr.filter",function(t){if(t instanceof o&&"filter"==t.type){Y.stop();var e=t.node.id;e||(l(t.node,{id:t.id}),e=t.id),l(this.node,{filter:a.url(e)})}t&&"none"!=t||(Y.stop(),this.node.removeAttribute("filter"))}),a.filter.blur=function(t,e){null==t&&(t=2);var n=null==e?t:[t,e];return a.format('<feGaussianBlur stdDeviation="{def}"/>',{def:n})},a.filter.blur.toString=function(){return this()},a.filter.shadow=function(t,e,n,r,i){return null==i&&(null==r?(i=n,n=4,r="#000"):(i=r,r=n,n=4)),null==n&&(n=4),null==i&&(i=1),null==t&&(t=0,e=2),null==e&&(e=t),r=a.color(r),a.format('<feGaussianBlur in="SourceAlpha" stdDeviation="{blur}"/><feOffset dx="{dx}" dy="{dy}" result="offsetblur"/><feFlood flood-color="{color}"/><feComposite in2="offsetblur" operator="in"/><feComponentTransfer><feFuncA type="linear" slope="{opacity}"/></feComponentTransfer><feMerge><feMergeNode/><feMergeNode in="SourceGraphic"/></feMerge>',{color:r,dx:t,dy:e,blur:n,opacity:i})},a.filter.shadow.toString=function(){return this()},a.filter.grayscale=function(t){return null==t&&(t=1),a.format('<feColorMatrix type="matrix" values="{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {b} {h} 0 0 0 0 0 1 0"/>',{a:.2126+.7874*(1-t),b:.7152-.7152*(1-t),c:.0722-.0722*(1-t),d:.2126-.2126*(1-t),e:.7152+.2848*(1-t),f:.0722-.0722*(1-t),g:.2126-.2126*(1-t),h:.0722+.9278*(1-t)})},a.filter.grayscale.toString=function(){return this()},a.filter.sepia=function(t){return null==t&&(t=1),a.format('<feColorMatrix type="matrix" values="{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {h} {i} 0 0 0 0 0 1 0"/>',{a:.393+.607*(1-t),b:.769-.769*(1-t),c:.189-.189*(1-t),d:.349-.349*(1-t),e:.686+.314*(1-t),f:.168-.168*(1-t),g:.272-.272*(1-t),h:.534-.534*(1-t),i:.131+.869*(1-t)})},a.filter.sepia.toString=function(){return this()},a.filter.saturate=function(t){return null==t&&(t=1),a.format('<feColorMatrix type="saturate" values="{amount}"/>',{amount:1-t})},a.filter.saturate.toString=function(){return this()},a.filter.hueRotate=function(t){return t=t||0,a.format('<feColorMatrix type="hueRotate" values="{angle}"/>',{angle:t})},a.filter.hueRotate.toString=function(){return this()},a.filter.invert=function(t){return null==t&&(t=1),a.format('<feComponentTransfer><feFuncR type="table" tableValues="{amount} {amount2}"/><feFuncG type="table" tableValues="{amount} {amount2}"/><feFuncB type="table" tableValues="{amount} {amount2}"/></feComponentTransfer>',{amount:t,amount2:1-t})},a.filter.invert.toString=function(){return this()},a.filter.brightness=function(t){return null==t&&(t=1),a.format('<feComponentTransfer><feFuncR type="linear" slope="{amount}"/><feFuncG type="linear" slope="{amount}"/><feFuncB type="linear" slope="{amount}"/></feComponentTransfer>',{amount:t})},a.filter.brightness.toString=function(){return this()},a.filter.contrast=function(t){return null==t&&(t=1),a.format('<feComponentTransfer><feFuncR type="linear" slope="{amount}" intercept="{amount2}"/><feFuncG type="linear" slope="{amount}" intercept="{amount2}"/><feFuncB type="linear" slope="{amount}" intercept="{amount2}"/></feComponentTransfer>',{amount:t,amount2:.5-t/2})},a.filter.contrast.toString=function(){return this()}}),e.plugin(function(t,e,n,r,i){var a=t._.box,o=t.is,s=/^[^a-z]*([tbmlrc])/i,l=function(){return"T"+this.dx+","+this.dy};e.prototype.getAlign=function(t,e){null==e&&o(t,"string")&&(e=t,t=null);var n=(t=t||this.paper).getBBox?t.getBBox():a(t),r=this.getBBox(),i={};switch(e=(e=e&&e.match(s))?e[1].toLowerCase():"c"){case"t":i.dx=0,i.dy=n.y-r.y;break;case"b":i.dx=0,i.dy=n.y2-r.y2;break;case"m":i.dx=0,i.dy=n.cy-r.cy;break;case"l":i.dx=n.x-r.x,i.dy=0;break;case"r":i.dx=n.x2-r.x2,i.dy=0;break;default:i.dx=n.cx-r.cx,i.dy=0}return i.toString=l,i},e.prototype.align=function(t,e){return this.transform("..."+this.getAlign(t,e))}}),e.plugin(function(e,t,n,r){function i(t){t=t.split(/(?=#)/);var e=new String(t[5]);return e[50]=t[0],e[100]=t[1],e[200]=t[2],e[300]=t[3],e[400]=t[4],e[500]=t[5],e[600]=t[6],e[700]=t[7],e[800]=t[8],e[900]=t[9],t[10]&&(e.A100=t[10],e.A200=t[11],e.A400=t[12],e.A700=t[13]),e}e.mui={},e.flat={},e.mui.red=i("#ffebee#ffcdd2#ef9a9a#e57373#ef5350#f44336#e53935#d32f2f#c62828#b71c1c#ff8a80#ff5252#ff1744#d50000"),e.mui.pink=i("#FCE4EC#F8BBD0#F48FB1#F06292#EC407A#E91E63#D81B60#C2185B#AD1457#880E4F#FF80AB#FF4081#F50057#C51162"),e.mui.purple=i("#F3E5F5#E1BEE7#CE93D8#BA68C8#AB47BC#9C27B0#8E24AA#7B1FA2#6A1B9A#4A148C#EA80FC#E040FB#D500F9#AA00FF"),e.mui.deeppurple=i("#EDE7F6#D1C4E9#B39DDB#9575CD#7E57C2#673AB7#5E35B1#512DA8#4527A0#311B92#B388FF#7C4DFF#651FFF#6200EA"),e.mui.indigo=i("#E8EAF6#C5CAE9#9FA8DA#7986CB#5C6BC0#3F51B5#3949AB#303F9F#283593#1A237E#8C9EFF#536DFE#3D5AFE#304FFE"),e.mui.blue=i("#E3F2FD#BBDEFB#90CAF9#64B5F6#64B5F6#2196F3#1E88E5#1976D2#1565C0#0D47A1#82B1FF#448AFF#2979FF#2962FF"),e.mui.lightblue=i("#E1F5FE#B3E5FC#81D4FA#4FC3F7#29B6F6#03A9F4#039BE5#0288D1#0277BD#01579B#80D8FF#40C4FF#00B0FF#0091EA"),e.mui.cyan=i("#E0F7FA#B2EBF2#80DEEA#4DD0E1#26C6DA#00BCD4#00ACC1#0097A7#00838F#006064#84FFFF#18FFFF#00E5FF#00B8D4"),e.mui.teal=i("#E0F2F1#B2DFDB#80CBC4#4DB6AC#26A69A#009688#00897B#00796B#00695C#004D40#A7FFEB#64FFDA#1DE9B6#00BFA5"),e.mui.green=i("#E8F5E9#C8E6C9#A5D6A7#81C784#66BB6A#4CAF50#43A047#388E3C#2E7D32#1B5E20#B9F6CA#69F0AE#00E676#00C853"),e.mui.lightgreen=i("#F1F8E9#DCEDC8#C5E1A5#AED581#9CCC65#8BC34A#7CB342#689F38#558B2F#33691E#CCFF90#B2FF59#76FF03#64DD17"),e.mui.lime=i("#F9FBE7#F0F4C3#E6EE9C#DCE775#D4E157#CDDC39#C0CA33#AFB42B#9E9D24#827717#F4FF81#EEFF41#C6FF00#AEEA00"),e.mui.yellow=i("#FFFDE7#FFF9C4#FFF59D#FFF176#FFEE58#FFEB3B#FDD835#FBC02D#F9A825#F57F17#FFFF8D#FFFF00#FFEA00#FFD600"),e.mui.amber=i("#FFF8E1#FFECB3#FFE082#FFD54F#FFCA28#FFC107#FFB300#FFA000#FF8F00#FF6F00#FFE57F#FFD740#FFC400#FFAB00"),e.mui.orange=i("#FFF3E0#FFE0B2#FFCC80#FFB74D#FFA726#FF9800#FB8C00#F57C00#EF6C00#E65100#FFD180#FFAB40#FF9100#FF6D00"),e.mui.deeporange=i("#FBE9E7#FFCCBC#FFAB91#FF8A65#FF7043#FF5722#F4511E#E64A19#D84315#BF360C#FF9E80#FF6E40#FF3D00#DD2C00"),e.mui.brown=i("#EFEBE9#D7CCC8#BCAAA4#A1887F#8D6E63#795548#6D4C41#5D4037#4E342E#3E2723"),e.mui.grey=i("#FAFAFA#F5F5F5#EEEEEE#E0E0E0#BDBDBD#9E9E9E#757575#616161#424242#212121"),e.mui.bluegrey=i("#ECEFF1#CFD8DC#B0BEC5#90A4AE#78909C#607D8B#546E7A#455A64#37474F#263238"),e.flat.turquoise="#1abc9c",e.flat.greensea="#16a085",e.flat.sunflower="#f1c40f",e.flat.orange="#f39c12",e.flat.emerland="#2ecc71",e.flat.nephritis="#27ae60",e.flat.carrot="#e67e22",e.flat.pumpkin="#d35400",e.flat.peterriver="#3498db",e.flat.belizehole="#2980b9",e.flat.alizarin="#e74c3c",e.flat.pomegranate="#c0392b",e.flat.amethyst="#9b59b6",e.flat.wisteria="#8e44ad",e.flat.clouds="#ecf0f1",e.flat.silver="#bdc3c7",e.flat.wetasphalt="#34495e",e.flat.midnightblue="#2c3e50",e.flat.concrete="#95a5a6",e.flat.asbestos="#7f8c8d",e.importMUIColors=function(){for(var t in e.mui)e.mui.hasOwnProperty(t)&&(v[t]=e.mui[t])}}),e}),function(){var e=[{x:217,y:173,r:3},{x:326,y:170,r:4},{x:401,y:230,r:3},{x:479,y:167,r:3},{x:568,y:165,r:3},{x:630,y:236,r:3},{x:646,y:328,r:3},{x:602,y:393,r:6},{x:397,y:582,r:6},{x:219,y:417,r:3},{x:160,y:341,r:4},{x:157,y:243,r:6},{x:217,y:173,r:3},{x:401,y:230,r:3},{x:326,y:170,r:4},{x:276,y:192,r:4},{x:267,y:284,r:4},{x:401,y:230,r:3},{x:436,y:320,r:8},{x:267,y:284,r:4},{x:219,y:417,r:3},{x:157,y:243,r:6},{x:192,y:293,r:3},{x:267,y:284,r:4},{x:310,y:487,r:4},{x:436,y:320,r:8},{x:480,y:496,r:3}],i=Snap("#hart"),n=0,a=setInterval(function(){var t,r;console.log(n),console.log(e.length),e.length-1<=n?clearInterval(a):(t=e[n],r=e[n+1],i.path("M "+t.x+", "+t.y).attr({fill:"none",stroke:"#000000",strokeWidth:1}).animate({d:"M "+t.x+", "+t.y+"L "+r.x+", "+r.y},500,mina.easeinout,function(){var t,e,n;t=r.x,e=r.y,n=r.r,i.circle(t,e,n).attr({fill:"red",stroke:"none"})}),n++)},500)}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
